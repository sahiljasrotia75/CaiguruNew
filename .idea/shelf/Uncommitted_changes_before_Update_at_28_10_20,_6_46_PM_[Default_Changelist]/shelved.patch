Index: app/src/main/java/com/example/caiguru/buyer/buyerLists/buyerShoppingListFragment/BuyerShoppingRepo.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.caiguru.buyer.buyerLists.buyerShoppingListFragment\n\nimport android.app.Application\nimport androidx.lifecycle.MutableLiveData\nimport com.example.caiguru.R\nimport com.example.caiguru.commonScreens.loginScreen.ErrorModel\nimport com.google.gson.Gson\nimport com.google.gson.reflect.TypeToken\nimport constant_Webservices.Constant\nimport constant_Webservices.WebServices\nimport okhttp3.ResponseBody\nimport org.json.JSONObject\nimport retrofit2.Call\nimport retrofit2.Callback\nimport retrofit2.Response\nimport java.lang.Exception\n\nclass BuyerShoppingRepo(var application: Application) {\n    var mSucessfulChosseSeller = MutableLiveData<ArrayList<BuyerShopModel>>()\n    var mFailureChosseSeller = MutableLiveData<String>()\n    val modelArray = ArrayList<BuyerShopModel>()\n    fun your_shopping_lists(page: String) {\n\n        val retrofit = Constant.getRestClient()\n\n        val services = retrofit.create(WebServices::class.java)\n        val call: Call<ResponseBody> = services.your_shopping_lists(\n            \"Bearer \" + Constant.getPrefs(application).getString(\n                Constant.token,\n                \"\"\n            ), page\n        )\n        call.enqueue(object : Callback<ResponseBody> {\n            override fun onResponse(call: Call<ResponseBody>, response: Response<ResponseBody>) {\n                if (response.isSuccessful) {\n                    try {\n\n\n                        val res = response.body()!!.string()\n                        val json = JSONObject(res)\n                        val status = json.optString(\"status\")\n                        val logout = json.optString(\"logout\")\n                        if (logout == \"true\") {\n                            logout()\n                        }\n                        if (status == \"true\") {\n                            if (page == \"1\") {\n                                modelArray.clear()\n                            }\n\n                            val lists = json.optJSONArray(\"lists\").toString()\n\n                            val gson = Gson()\n                            val model1: ArrayList<BuyerShopModel> =\n                                gson.fromJson(\n                                    lists,\n                                    object : TypeToken<ArrayList<BuyerShopModel>>() {}.type\n                                )\n                            modelArray.addAll(model1)\n                            mSucessfulChosseSeller.value = modelArray\n\n                        } else {\n                            val msg = R.string.network_error\n                            mFailureChosseSeller.value = msg.toString()\n\n                        }\n\n                    } catch (e: Exception) {\n                        e.printStackTrace()\n                    }\n                } else {\n                    val msg = R.string.network_error\n                    mFailureChosseSeller.value = msg.toString()\n                }\n            }\n\n            override fun onFailure(call: Call<ResponseBody>, t: Throwable) {\n                val msg = application.getString(R.string.network_error)\n                mFailureChosseSeller.value = msg\n            }\n\n        })\n    }\n\n    fun mSucessfulshopListData(): MutableLiveData<ArrayList<BuyerShopModel>> {\n\n        return mSucessfulChosseSeller\n    }\n\n    fun mFailureShopList(): MutableLiveData<String> {\n\n        return mFailureChosseSeller\n    }\n\n    //********************logout when the user is banned\n    var mData = MutableLiveData<ErrorModel>()\n    fun logout() {\n        val retrofit = Constant.getRestClient()\n\n        val services = retrofit.create(WebServices::class.java)\n        val call: Call<ResponseBody> = services.logout(\n            \"Bearer \" + Constant.getPrefs(application).getString(\n                Constant.token,\n                \"\"\n            )\n        )\n        call.enqueue(object : Callback<ResponseBody> {\n            override fun onResponse(call: Call<ResponseBody>, response: Response<ResponseBody>) {\n                val model = ErrorModel()\n                model.message = application.getString(R.string.Logout_Sucessfully)\n                Constant.getPrefs(application).edit().clear().apply()\n                mData.value = model\n                Constant.disconnectFromFacebook()\n            }\n\n            override fun onFailure(call: Call<ResponseBody>, t: Throwable) {\n                val model = ErrorModel()\n                model.message = application.getString(R.string.Logout_Sucessfully)\n                Constant.getPrefs(application).edit().clear().apply()\n                mData.value = model\n                Constant.disconnectFromFacebook()\n            }\n\n        })\n\n\n    }\n\n\n    //status observer\n    fun logoutBannedUser(): MutableLiveData<ErrorModel> {\n        return mData\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/caiguru/buyer/buyerLists/buyerShoppingListFragment/BuyerShoppingRepo.kt	(revision ddfacff8e54db732eb6b32ab1cad9fb3d43b92b7)
+++ app/src/main/java/com/example/caiguru/buyer/buyerLists/buyerShoppingListFragment/BuyerShoppingRepo.kt	(date 1602652942000)
@@ -19,6 +19,8 @@
     var mSucessfulChosseSeller = MutableLiveData<ArrayList<BuyerShopModel>>()
     var mFailureChosseSeller = MutableLiveData<String>()
     val modelArray = ArrayList<BuyerShopModel>()
+
+
     fun your_shopping_lists(page: String) {
 
         val retrofit = Constant.getRestClient()
Index: app/src/main/java/com/example/caiguru/seller/sellerOrder/sellerApprovalOrderList/SellerApprovalOrderListActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.caiguru.seller.sellerOrder.sellerApprovalOrderList\n\nimport android.annotation.SuppressLint\nimport android.app.Activity\nimport android.app.AlertDialog\nimport android.content.DialogInterface\nimport android.content.Intent\nimport android.net.Uri\nimport android.os.Bundle\nimport android.view.MenuItem\nimport android.view.View\nimport android.widget.TextView\nimport android.widget.Toast\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.appcompat.widget.Toolbar\nimport androidx.databinding.DataBindingUtil\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.ViewModelProviders\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.example.caiguru.R\nimport com.example.caiguru.commonScreens.commonNotifications.commonNotification.NotificationModel\nimport com.example.caiguru.databinding.ActivitySellerApprovalOrderListBinding\nimport com.example.caiguru.seller.homeSeller.HomeSellerModel\nimport com.example.caiguru.seller.sellerOrder.orderRejected.OrderRejectedActivity\nimport com.example.caiguru.seller.sellerOrder.sellerPendingApprovals.SellerApprovalModel\nimport com.google.android.gms.location.FusedLocationProviderClient\nimport com.google.android.gms.location.LocationServices\nimport constant_Webservices.Constant\nimport kotlinx.android.synthetic.main.activity_seller_approval_order_list.*\n\nclass SellerApprovalOrderListActivity : AppCompatActivity() {\n\n    private var latitude: String = \"\"\n    private var longitude: String = \"\"\n    private var reqID: String = \"\"\n    private var listType: String = \"\"\n    private lateinit var adapterSuggestedProduct: OrderSuggestedProductAdapter\n    private lateinit var adapter: ApprovalOrderListParentAdapter\n    private var buyerName: String = \"\"\n    private lateinit var text: TextView\n    val localModel = SellerApprovalModel()\n    private lateinit var mvmodel: ApprovalOrderListViewModel\n    private lateinit var mbinding: ActivitySellerApprovalOrderListBinding\n    private lateinit var fusedLocationClient: FusedLocationProviderClient\n\n    @SuppressLint(\"SetTextI18n\")\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        mbinding =\n            DataBindingUtil.setContentView(this, R.layout.activity_seller_approval_order_list)\n        mvmodel = ViewModelProviders.of(this)[ApprovalOrderListViewModel::class.java]\n        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)\n\n        if (intent.hasExtra(\"keyHomeFragmentData\")) {\n            val homeSellerModel = intent.getParcelableExtra<HomeSellerModel>(\"keyHomeFragmentData\")!!\n            listType = homeSellerModel.list_type\n            reqID = homeSellerModel.req_id\n            buyerName = homeSellerModel.name\n            localModel.buyer_id = homeSellerModel.buyer_id\n            localModel.buyer_name = homeSellerModel.name\n            localModel.list_type = homeSellerModel.list_type\n            minutesAgoList.text =\n                \"${getString(R.string.Purchased_Order)} ${Constant.timesAgoLogic(\n                    homeSellerModel.created_at,\n                    this\n                )}.\"\n            val list_type = homeSellerModel.list_type\n            btnHideApproveReject(list_type)\n        } else if (intent.hasExtra(\"keyBuyerData\")) {\n            val sellerDataModel = intent.getParcelableExtra<SellerApprovalModel>(\"keyBuyerData\")!!\n            buyerName = sellerDataModel.buyer_name\n            listType = sellerDataModel.list_type\n            reqID = sellerDataModel.id\n            localModel.buyer_id = sellerDataModel.buyer_id\n            localModel.buyer_name = sellerDataModel.buyer_name\n            localModel.list_type = sellerDataModel.list_type\n            minutesAgoList.text =\n                \"${getString(R.string.Purchased_Order)} ${Constant.timesAgoLogic(\n                    sellerDataModel.created_at,\n                    this\n                )}.\"\n            //hide the button in case of buyer list\n            val list_type = sellerDataModel.list_type\n            btnHideApproveReject(list_type)\n        } else if (intent.hasExtra(\"KeySourceBuyerSubmitQuote12\")) {\n            val dataModel =\n                intent.getParcelableExtra<NotificationModel>(\"KeySourceBuyerSubmitQuote12\")!!\n            reqID = dataModel.source_id\n            listType = dataModel.list_type\n            buyerName = dataModel.name\n            localModel.buyer_id = dataModel.sender_id\n            localModel.buyer_name = dataModel.name\n            localModel.list_type = dataModel.list_type\n            minutesAgoList.text =\n                \"${getString(R.string.Purchased_Order)} ${Constant.timesAgoLogic(\n                    dataModel.created_at,\n                    this\n                )}.\"\n//hide the button\n            btnHideApproveRejectActionTaken(dataModel.action_taken)\n            //Read notification\n            mvmodel.notificationRead(dataModel.notification_id)\n        } else {\n            reqID = intent.getStringExtra(\"source_id\")!!\n            listType = intent.getStringExtra(\"list_type\")!!\n            val source = intent.getStringExtra(\"source\")!!\n            buyerName = intent.getStringExtra(\"name\")!!\n            val image = intent.getStringExtra(\"image\")!!\n            val level = intent.getStringExtra(\"level\")!!\n            val listingname = intent.getStringExtra(\"listingname\")!!\n            val reputation = intent.getStringExtra(\"reputation\")!!\n            val created_at = intent.getStringExtra(\"created_at\")!!\n            val sender_id = intent.getStringExtra(\"sender_id\")!!\n            localModel.buyer_id = sender_id\n            localModel.buyer_name = buyerName\n            localModel.list_type = listType\n\n            btnHideApproveReject(listType)\n            minutesAgoList.text =\n                \"${getString(R.string.Purchased_Order)} ${Constant.timesAgoLogic(\n                    created_at,\n                    this\n                )}.\"\n        }\n        sellerActiveStatus()\n        SettingUpToolbar()\n        setAdapter()\n        suggestedProductAdapter()\n        //******************Api get_request_detail*******************//\n        mvmodel.getrequestDetails(reqID, listType)\n\n        //********************observer of get_request_detail***********//\n        //sucessful\n        mvmodel.mSucessfulOrderList().observe(this, Observer {\n            try {\n\n\n                mbinding.nestedScrollLayout.visibility = View.VISIBLE\n                mbinding.progressedBar.visibility = View.GONE\n                adapter.updateData(it)//parent adapter\n                for (item in it) {\n                    mbinding.txtAddressbuyer.text = item.address\n                    mbinding.txtComissions.text =\n                        \"${Constant.roundValue(item.credits.toDouble())} ${getString(R.string.credits)}\"\n//set the cash on delivery\n                    txtCashOnDelivery.text =\n                        Constant.roundValue(item.amount.toDouble() - item.credits.toDouble())\n\n                    if (item.suggest_products.isEmpty()) {\n                        mbinding.suggestProducttxt.visibility = View.INVISIBLE\n                    } else {\n                        mbinding.suggestProducttxt.visibility = View.VISIBLE\n                        //suggest product Adpter\n                        adapterSuggestedProduct.Update(item.suggest_products)\n                    }\n                    if (item.delivery_type == \"1\") {\n                        mbinding.headingAddress.text =\n                            getString(R.string.The_order_will_be_picked_up_at_your_address)\n                    } else {\n                        mbinding.headingAddress.text = getString(R.string.Delivery_Address)\n                    }\n                    latitude = item.lat\n                    longitude = item.long\n                }\n\n            } catch (e: Exception) {\n                e.printStackTrace()\n            }\n        })\n        //failure\n        mvmodel.mFailure().observe(this, Observer {\n            Toast.makeText(this, it, Toast.LENGTH_SHORT).show()\n            mbinding.noData.visibility = View.VISIBLE\n            mbinding.progressedBar.visibility = View.VISIBLE\n            mbinding.nestedScrollLayout.visibility = View.INVISIBLE\n        })\n\n        //*****************api of change_request_status***************//\n        //set the click on the button request approval\n        mbinding.btnApproved.setOnClickListener {\n            mvmodel.getRequestApprovals(reqID, listType)\n            mbinding.progressedBar.visibility = View.VISIBLE\n            mbinding.btnlayout.visibility = View.GONE\n\n        }\n        //****************set the observer of approval\n        mvmodel.mSucessfulRequestApprovals().observe(this, Observer {\n            alertDialog(it)\n            mbinding.progressedBar.visibility = View.GONE\n            mbinding.btnlayout.visibility = View.VISIBLE\n        })\n        //failure\n        mvmodel.mFailureRequestApprovals().observe(this, Observer {\n            alertDialog(it)\n            mbinding.btnlayout.visibility = View.VISIBLE\n            mbinding.progressedBar.visibility = View.GONE\n        })\n\n\n        //*****************api of change_request_status***************//\n        //set the click on the rejected list\n        mbinding.btnRejected.setOnClickListener {\n            val intent = Intent(this, OrderRejectedActivity::class.java)\n            intent.putExtra(\"model\", reqID)\n            startActivityForResult(intent, 100)\n            setResult(Activity.RESULT_OK, intent)//set the result\n            finish()\n        }\n//        //*********set the obaserver of rejected list\n//        mvmodel.mSucessfulRejectedRequest().observe(this, Observer {\n//\n//            alertDialogNo(it)\n//            mbinding.progressedBar.visibility = View.GONE\n//            mbinding.btnlayout.visibility = View.VISIBLE\n//\n//        })\n//        mvmodel.mFailureRejectedRequest().observe(this, Observer {\n//            alertDialog(it)\n//            mbinding.progressedBar.visibility = View.GONE\n//            mbinding.btnlayout.visibility = View.VISIBLE\n//\n//        })\n        // set Marker click\n        setClicks()\n    }\n\n    private fun setClicks() {\n        addressLayout.setOnClickListener {\n            if (mbinding.txtAddressbuyer.text.isNotEmpty()&& latitude.isNotEmpty()) {\n//                val latLng = Constant.getLocationFromAddress(this, txtAddressbuyer.text as String?)\n                val gmmIntentUri: Uri =\n                    Uri.parse(\"google.navigation:q=\" + latitude + \",\" + longitude)\n                val mapIntent = Intent(Intent.ACTION_VIEW, gmmIntentUri)\n                mapIntent.setPackage(\"com.google.android.apps.maps\")\n                startActivity(mapIntent)\n                return@setOnClickListener\n            } else {\n                Toast.makeText(this, getString(R.string.no_address_found), Toast.LENGTH_SHORT)\n                    .show()\n                return@setOnClickListener\n            }\n        }\n    }\n\n\n    private fun btnHideApproveRejectActionTaken(actionTaken: String) {\n        if (actionTaken == \"1\") {\n            btnlayout.visibility = View.VISIBLE\n        } else {\n            btnlayout.visibility = View.INVISIBLE\n        }\n\n    }\n\n    private fun btnHideApproveReject(list_type: String) {\n\n        if (list_type == \"2\") {\n            btnlayout.visibility = View.INVISIBLE\n        } else {\n            btnlayout.visibility = View.VISIBLE\n        }\n    }\n\n    private fun sellerActiveStatus() {\n        val seller_active_status =\n            Constant.getPrefs(this).getString(Constant.seller_active_status, \"\")\n\n        if (seller_active_status == \"1\") {\n            activeOrder.background = resources.getDrawable(R.color.green)\n            activeOrder.text = resources.getText(R.string.active)\n\n        } else {\n            activeOrder.background = resources.getDrawable(R.color.red)\n            activeOrder.text = resources.getText(R.string.inactive)\n        }\n    }\n\n    //Alert dialog\n    private fun alertDialog(it: String) {\n        val mDialog = AlertDialog.Builder(this)\n        mDialog.setTitle(getString(R.string.alert))\n        mDialog.setMessage(it)\n        mDialog.setCancelable(false)\n        mDialog.setPositiveButton(\n            getString(R.string.ok),\n            DialogInterface.OnClickListener { dialog, which ->\n\n                dialog.dismiss()\n                val intent = Intent()\n                setResult(Activity.RESULT_OK, intent)//set the result\n                finish()\n            })\n        mDialog.show()\n    }\n\n    override fun onBackPressed() {\n        super.onBackPressed()\n        val intent = Intent()\n        setResult(Activity.RESULT_CANCELED, intent)//set the result\n        finish()\n    }\n\n    //Alert dialog\n    private fun alertDialogNo(it: String) {\n        val mDialog = AlertDialog.Builder(this)\n        mDialog.setTitle(getString(R.string.alert))\n        mDialog.setMessage(it)\n        mDialog.setPositiveButton(\n            getString(R.string.ok),\n            DialogInterface.OnClickListener { dialog, which ->\n                dialog.dismiss()\n                var intent = Intent(this, OrderRejectedActivity::class.java)\n                startActivity(intent)\n                //    setResult(Activity.RESULT_OK, intent)//set the result\n                finish()\n            })\n        mDialog.show()\n\n    }\n\n    //.........setuptool bar..............//\n    @SuppressLint(\"SetTextI18n\")\n    private fun SettingUpToolbar() {\n        val toolbar = findViewById<Toolbar>(R.id.toolbar)\n        title = \"\"\n        setSupportActionBar(toolbar)\n        //set the text\n        text = findViewById(R.id.toolbartittle)\n        // text.text = buyerName + \"'s\" + \" \" + getString(R.string.Order_List)\n        text.text = buyerName\n        supportActionBar!!.setDisplayHomeAsUpEnabled(true)\n        supportActionBar!!.setHomeAsUpIndicator(R.drawable.ic_back_icon)\n\n\n//        text.setOnClickListener {\n//            val intent = Intent(this, OtherProfileViewActivity::class.java)\n//            intent.putExtra(\"keydata\", localModel)\n//            startActivity(intent)\n//        }\n//        data = intent.getParcelableExtra<SellerApprovalModel>(\"keydata\")\n//        buyer_name = data.buyer_name\n//        btnFollowUnfollow.visibility=View.VISIBLE\n//        if (data.list_type == \"1\") {\n//            usertype = \"2\"\n//        } else {\n//            usertype = \"1\"\n//        }\n    }\n\n    //..........back button click...........//\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\n        if (item != null) {\n            if (item.itemId == android.R.id.home) {\n                val intent = Intent()\n                setResult(Activity.RESULT_CANCELED, intent)//set the result\n                finish()\n\n            }\n        }\n        return super.onOptionsItemSelected(item)\n    }\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        if (resultCode == 100 && resultCode == RESULT_OK) {\n            finish()\n        }\n    }\n\n    //listAdapter\n    private fun setAdapter() {\n        val manager = LinearLayoutManager(this)\n        adapter = ApprovalOrderListParentAdapter(this)\n        mbinding.recyclerOrderList.layoutManager = manager\n        mbinding.recyclerOrderList.adapter = adapter\n    }\n\n    //suggestedProductAdapter\n    private fun suggestedProductAdapter() {\n\n        val manager = LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)\n        adapterSuggestedProduct = OrderSuggestedProductAdapter(this)\n        mbinding.suggestedRecycler.layoutManager = manager\n        mbinding.suggestedRecycler.adapter = adapterSuggestedProduct\n\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/caiguru/seller/sellerOrder/sellerApprovalOrderList/SellerApprovalOrderListActivity.kt	(revision ddfacff8e54db732eb6b32ab1cad9fb3d43b92b7)
+++ app/src/main/java/com/example/caiguru/seller/sellerOrder/sellerApprovalOrderList/SellerApprovalOrderListActivity.kt	(date 1603351377000)
@@ -134,19 +134,14 @@
         //sucessful
         mvmodel.mSucessfulOrderList().observe(this, Observer {
             try {
-
-
                 mbinding.nestedScrollLayout.visibility = View.VISIBLE
                 mbinding.progressedBar.visibility = View.GONE
                 adapter.updateData(it)//parent adapter
                 for (item in it) {
                     mbinding.txtAddressbuyer.text = item.address
-                    mbinding.txtComissions.text =
-                        "${Constant.roundValue(item.credits.toDouble())} ${getString(R.string.credits)}"
-//set the cash on delivery
-                    txtCashOnDelivery.text =
-                        Constant.roundValue(item.amount.toDouble() - item.credits.toDouble())
-
+                    mbinding.txtComissions.text = "${Constant.roundValue(item.credits.toDouble())} ${getString(R.string.credits)}"
+                    //set the cash on delivery
+                    txtCashOnDelivery.text = Constant.roundValue(item.amount.toDouble() - item.credits.toDouble())
                     if (item.suggest_products.isEmpty()) {
                         mbinding.suggestProducttxt.visibility = View.INVISIBLE
                     } else {
@@ -163,7 +158,6 @@
                     latitude = item.lat
                     longitude = item.long
                 }
-
             } catch (e: Exception) {
                 e.printStackTrace()
             }
Index: app/src/main/java/com/example/caiguru/commonScreens/dashBoardParentActivity/DashBoardBuyerActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.caiguru.commonScreens.dashBoardParentActivity\n\nimport android.Manifest\nimport android.annotation.TargetApi\nimport android.app.Activity\nimport android.app.Dialog\nimport android.content.Context\nimport android.content.Intent\nimport android.content.pm.PackageManager\nimport android.graphics.Color\nimport android.graphics.drawable.ColorDrawable\nimport android.location.Address\nimport android.location.Geocoder\nimport android.location.Location\nimport android.location.LocationManager\nimport android.net.Uri\nimport android.os.*\nimport android.text.InputFilter\nimport android.text.SpannableString\nimport android.text.style.ForegroundColorSpan\nimport android.util.Log\nimport android.util.TypedValue\nimport android.view.Menu\nimport android.view.MenuItem\nimport android.view.View\nimport android.widget.TextView\nimport android.widget.Toast\nimport androidx.annotation.RequiresApi\nimport androidx.appcompat.app.AlertDialog\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.appcompat.widget.Toolbar\nimport androidx.core.app.ActivityCompat\nimport androidx.fragment.app.Fragment\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.ViewModelProvider\nimport com.example.caiguru.R\nimport com.example.caiguru.buyer.buyerAddAddress.BuyerAddressMapBoxActivity\nimport com.example.caiguru.buyer.buyerLists.buyerShopApproveReject.BuyerShopListApproveRejectActivity\nimport com.example.caiguru.buyer.buyerLists.buyerShoppingListFragment.BuyerShoppingFragment\nimport com.example.caiguru.buyer.buyerProfile.buyerMyOrder.OrderModel\nimport com.example.caiguru.buyer.buyerProfile.buyerOrderDetalis.BuyerOrderDetailsActivity\nimport com.example.caiguru.buyer.buyerProfile.buyerOrderDetalis.underReviewOrderDetails.UnderReviewOrderDetailsActivity\nimport com.example.caiguru.buyer.buyerProfile.buyerSettingFragment.BuyerSettingFragment\nimport com.example.caiguru.buyer.chooseSellers.chooseSeller.ChooseSellerFragment\nimport com.example.caiguru.buyer.homeBuyers.homeBuyer.HomeBuyerFragment\nimport com.example.caiguru.buyer.postList.buyerPostShoppingListFirstTime.BuyerPostShoppingListFragment\nimport com.example.caiguru.buyer.postList.buyerPostShoppingListFirstTime.BuyerPostViewModel\nimport com.example.caiguru.buyer.postList.buyerPostShoppingListFirstTime.PostBuyerShopListModel\nimport com.example.caiguru.buyer.postList.shoppingListPosted.BuyerShoppingListPostedActivity\nimport com.example.caiguru.commonScreens.chat.ChatActivity\nimport com.example.caiguru.commonScreens.chat.ModelChat\nimport com.example.caiguru.commonScreens.chat.chatMessage.ChatMessagesActivity\nimport com.example.caiguru.commonScreens.commonNotifications.commonNotification.CommonNotificationActivity\nimport com.example.caiguru.commonScreens.commonNotifications.commonNotification.NotificationModel\nimport com.example.caiguru.commonScreens.commonNotifications.commonNotificationConfirmation.CommonNotificationConfirmationActivity\nimport com.example.caiguru.commonScreens.commonNotifications.disputeAndResolution.refuteSellerSideNotification.ResolutionActivity\nimport com.example.caiguru.commonScreens.commonNotifications.rateBuyer.RateBuyerActivity\nimport com.example.caiguru.commonScreens.commonNotifications.rateSeller.RateSellerActivity\nimport com.example.caiguru.commonScreens.dashBoardParentActivity.dashboardStartingNotification.sellerUnSeenNotification.CustomPagerAdapter\nimport com.example.caiguru.commonScreens.dashBoardParentActivity.dashboardStartingNotification.sellerUnSeenNotification.ZoomOutPageTransformer\nimport com.example.caiguru.commonScreens.dashBoardParentActivity.searchProductOrSeller.SearchSellerProuctsActivity\nimport com.example.caiguru.commonScreens.earnCreditsConvert.CreditConvertActivity\nimport com.example.caiguru.commonScreens.hideEmoji.HideEmoji\nimport com.example.caiguru.commonScreens.loginScreen.LoginActivity\nimport com.example.caiguru.commonScreens.networkError.NetworkErrorActivity\nimport com.example.caiguru.commonScreens.referralCode.ReferralCodeActivity\nimport com.example.caiguru.commonScreens.selectCities.CitiesModel\nimport com.example.caiguru.commonScreens.selectCities.SelectCitiesActivity\nimport com.example.caiguru.seller.homeSeller.GetProfileModel\nimport com.example.caiguru.seller.homeSeller.HomeSellerFragment\nimport com.example.caiguru.seller.sellerOrder.sellerApprovalOrderList.SellerApprovalOrderListActivity\nimport com.example.caiguru.seller.sellerOrder.sellerCancelledOrderList.SellerCancelledOrderListActivity\nimport com.example.caiguru.seller.sellerOrder.sellerOrdersFragment.SellerOrderFragment\nimport com.example.caiguru.seller.sellerOrder.sellerToBeDeliveredOrderList.ToBeDeliveredOrderListActivity\nimport com.example.caiguru.seller.shoppingListSellers.deliveryZoneSeller.DeliveryZoneModel\nimport com.example.caiguru.seller.shoppingListSellers.shoppingListSeller.ShopListSellerFragment\nimport com.example.caiguru.seller.shoppingfragment.SellerSettingFragment\nimport com.google.android.gms.location.*\nimport com.google.android.material.bottomnavigation.BottomNavigationView\nimport com.google.gson.Gson\nimport constant_Webservices.Constant\nimport kotlinx.android.synthetic.main.activate_location_layout.view.*\nimport kotlinx.android.synthetic.main.activity_home_screen.*\nimport kotlinx.android.synthetic.main.buyer_add_address_dialog.*\nimport kotlinx.android.synthetic.main.dialog_active.*\nimport kotlinx.android.synthetic.main.toolbar.view.*\nimport me.relex.circleindicator.Config\nimport org.json.JSONObject\nimport java.io.IOException\nimport java.net.URLEncoder\nimport java.util.*\nimport kotlin.collections.ArrayList\n\nclass DashBoardBuyerActivity : AppCompatActivity(),\n    BottomNavigationView.OnNavigationItemSelectedListener,\n    HomeBuyerFragment.SwitchListener, HomeSellerFragment.SwitchListenerBuyer,\n    BuyerPostShoppingListFragment.HideButton, CustomPagerAdapter.setBuyerInterface {\n\n    private var resultCode1: String = \"0\"\n    val PERMISSION_ID = 42\n    private var creditPerProduct: String = \"\"\n    var freeProducts = 0\n    private var buyerLevel: String = \"\"\n    lateinit var fusedLocationClient: FusedLocationProviderClient\n    private var optionalDeliveryZoneModel = DeliveryZoneModel()\n    private lateinit var addressDialog: Dialog\n    private lateinit var tokenUser: String\n    private var getNotificationModel = ArrayList<NotificationModel>()\n    private lateinit var myCustomPagerAdapter: CustomPagerAdapter\n    private var tokenFirebase: String = \"\"\n    private lateinit var viewModelDashBoard: DashBoardViewModel\n    private var menuMain: Menu? = null\n    private var position = 0\n    private var fragmentCurrent = Fragment()\n    lateinit var mvmodel: BuyerPostViewModel\n    private lateinit var dialog: Dialog\n    private lateinit var mBottomNavigationBuyer: BottomNavigationView\n    private lateinit var mBottomNavigationSeller: BottomNavigationView\n    var sellerSelectedTap = 0\n    private var buyerCredits: String = \"\"\n    lateinit var textToolbarTitle: TextView\n    lateinit var done: TextView\n    lateinit var PleasWait: TextView\n    var showDialog = 0\n    // var hideUnhideIcon=0\n\n    @TargetApi(Build.VERSION_CODES.O)\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_home_screen)\n        addressDialog = Dialog(this)\n\n        // mvmodel = ViewModelProviders.of(this)[BuyerPostViewModel::class.java]\n        mvmodel = ViewModelProvider(this).get(BuyerPostViewModel::class.java)\n        viewModelDashBoard = ViewModelProvider(this).get(DashBoardViewModel::class.java)\n        val shredpref = getSharedPreferences(\"yogeshData\", Context.MODE_PRIVATE)\n        tokenFirebase = shredpref.getString(\"deviceId\", \"\")!!\n        // Add code to print out the key hash\n        // Constant.printHashKey(this)\n        init()\n        LOgoutBannedUser()\n        toolBarSet()\n        switchSellerBuyerCheckFirstTime()\n        setAllObserver()//al observer\n        pushNotificationCheck() //posh notication api data check\n        allButtonClick()//all clicks\n\n\n    }\n\n    private fun allButtonClick() {\n        setwhatsAppIConClick()//whatsapp click\n        //********************************skip button of view pager\n        ViewPagerSkipButton.setOnClickListener {\n            viewPagerLayout.visibility = View.GONE\n            viewPager.visibility = View.GONE\n            indicator_login.visibility = View.GONE\n            ViewPagerSkipButton.visibility = View.GONE\n        }\n        // ****************************************Post buyer list************************************//\n        done = findViewById(R.id.done)\n        PleasWait = findViewById(R.id.PleasWait)\n        done.setOnClickListener {\n            if (fragmentCurrent is BuyerPostShoppingListFragment) {   // is BuyerPostShoppingFragment is a instance of fragment ???..\n                val model: PostBuyerShopListModel =\n                    (fragmentCurrent as BuyerPostShoppingListFragment).buyer()  // casting  of BuyerPostShoppingFragment\n\n                if (model.listingname.isEmpty()) {\n//                    Toast.makeText(\n//                        this,\n//                        getString(R.string.Please_Enter_Name_Of_The_List),\n//                        Toast.LENGTH_SHORT\n//                    ).show()\n                    Constant.showToast(getString(R.string.Please_Enter_Name_Of_The_List), this)\n                } else if (model.category_id.isEmpty()) {\n//                    Toast.makeText(\n//                        this,\n//                        getString(R.string.Please_Select_Category),\n//                        Toast.LENGTH_SHORT\n//                    ).show()\n                    Constant.showToast(getString(R.string.Please_Select_Category), this)\n                } else if (model.daysTimeZoneJsonArray == \"[]\") {\n//                    Toast.makeText(\n//                        this,\n//                        getString(R.string.Please_Select_Days_You_Recive_Order),\n//                        Toast.LENGTH_SHORT\n//                    ).show()\n                    Constant.showToast(\n                        getString(R.string.Please_Select_Days_You_Recive_Order),\n                        this\n                    )\n\n                } else if (model.shoppingProductListJSonArray == \"[]\") {\n//                    Toast.makeText(\n//                        this,\n//                        getString(R.string.Please_Add_Your_Product),\n//                        Toast.LENGTH_SHORT\n//                    ).show()\n                    Constant.showToast(getString(R.string.Please_Add_Your_Product), this)\n\n                } else if (model.PostShoppingModel.size < 2) {\n                    Constant.firstTimeCaiguruDialog(this)\n                    return@setOnClickListener\n\n                } else if (model.deliveryZoneJsonList == \"[]\") {\n//                    Toast.makeText(\n//                        this,\n//                        getString(R.string.Please_Select_Your_Location),\n//                        Toast.LENGTH_SHORT\n//                    ).show()\n                    Constant.showToast(getString(R.string.Please_Select_Your_Location), this)\n                } else {\n//                    if (model.totalCredits > 0) {\n                    if (model.PostShoppingModel.size > creditDeductionLogic()) {\n                        //after five we are set the alert\n                        AlertUserAddProductAfterFive(model)\n                    } else {\n                        viewModelDashBoard.createShoppingList(\n                            model.listingname,\n                            model.category_id,\n                            model.deliveryZoneJsonList,\n                            model.daysTimeZoneJsonArray,\n                            model.shoppingProductListJSonArray,\n                            model.listId,\n                            model.credDitToDeduct\n                        )\n                        PleasWait.visibility = View.VISIBLE\n                        done.visibility = View.GONE\n                    }\n\n//                    } else {\n//                        Toast.makeText(\n//                            this,\n//                            getString(R.string.You_have_no_credits_in_your_wallet),\n//                            Toast.LENGTH_LONG\n//                        ).show()\n//                    }\n                }\n            }\n        }\n\n\n        homeToolbar.chat.setOnClickListener {\n            val intent = Intent(this@DashBoardBuyerActivity, ChatActivity::class.java)\n            startActivityForResult(intent, 1010)\n        }\n        //homeToolbar.refferal.visibility = View.VISIBLE\n        homeToolbar.refferal.setOnClickListener {\n            val intent = Intent(this@DashBoardBuyerActivity, ReferralCodeActivity::class.java)\n            startActivity(intent)\n        }\n        // show the icon\n        homeToolbar.setSearch.setOnClickListener {\n            // Constant.customDialogShowTotalCredits(this)\n            val intent = Intent(this, SearchSellerProuctsActivity::class.java)\n            intent.putExtra(\"KeyAddressModel\", optionalDeliveryZoneModel)\n            startActivity(intent)\n        }\n        //set the click on the dollar\n        homeToolbar.checkTotalCredits.setOnClickListener {\n            Constant.customDialogShowTotalCredits(this)\n\n        }\n    }\n\n\n    private fun pushNotificationCheck() {\n        //notificationApi\n        if (intent.hasExtra(\"KeySourceDashboard11\")) {\n            val dataModel = intent.getParcelableExtra<NotificationModel>(\"KeySourceDashboard11\")\n            viewModelDashBoard.notificationRead(dataModel!!.notification_id)\n        }\n\n        //*****************push notification Data***************//\n        if (intent.hasExtra(\"source_id\")) {\n            val sourceId = intent.getStringExtra(\"source_id\")\n            if (sourceId!!.isNotEmpty() && sourceId != \"0\") {\n                PushNotificationIntegration()\n            }\n\n        }\n    }\n\n    private fun setAllObserver() {\n        //******************************Switch active response ****************************//\n        mvmodel.getdata().observe(this, Observer {\n            //   if (it != null) {\n            DashBoardProgress.visibility = View.GONE\n            val type = Constant.getPrefs(this).getString(Constant.type, \"\")\n            val switch = Constant.getPrefs(this).getString(Constant.switch_active, \"\")\n            if (switch == \"2\" && type == \"2\") {\n//                val firstTime = Constant.getPrefs(this)\n//                    .getString(Constant.is_seller_first_time, \"\")\n//                if (firstTime == \"1\") {\n//                    firstTimeCaiguruDialog()//set the popup first time\n//                }\n                if (Constant.startFirstTime == true) {\n                    Constant.startFirstTime =false\n                    Constant.stopBacgroundTimer = 0\n                    showWhatsappIconBlinking()\n\n                }\n                showChatCount()//show  count\n                AddressLayout.visibility = View.GONE\n                homeToolbar.chat.visibility = View.VISIBLE\n                homeToolbar.whatsAppText.visibility = View.VISIBLE\n                homeToolbar.whatsAppTextICons.visibility = View.VISIBLE\n                homeToolbar.refferal.visibility = View.GONE\n                homeToolbar.checkTotalCredits.visibility = View.GONE\n                homeToolbar.setSearch.visibility = View.GONE\n                sellernav.visibility = View.VISIBLE\n                buyernav.visibility = View.GONE\n                //  mbinding.sellernav.setOnNavigationItemSelectedListener(this)\n                loadFragment(HomeSellerFragment())\n                if (sellerSelectedTap == 0) {\n                    showSelected(getString(R.string.home), 0, 0)\n                    showSelected(getString(R.string.sell_now), 1, 1)\n                    showSelected(getString(R.string.orders), 3, 1)\n                    showSelected(getString(R.string.Settings), 4, 1)\n                } else if (sellerSelectedTap == 1) {\n                    showSelected(getString(R.string.home), 0, 1)\n                    showSelected(getString(R.string.sell_now), 1, 0)\n                    showSelected(getString(R.string.orders), 3, 1)\n                    showSelected(getString(R.string.Settings), 4, 1)\n                } else if (sellerSelectedTap == 3) {\n                    showSelected(getString(R.string.home), 0, 1)\n                    showSelected(getString(R.string.sell_now), 1, 1)\n                    showSelected(getString(R.string.orders), 3, 0)\n                    showSelected(getString(R.string.Settings), 4, 1)\n                } else if (sellerSelectedTap == 4) {\n                    showSelected(getString(R.string.home), 0, 1)\n                    showSelected(getString(R.string.sell_now), 1, 1)\n                    showSelected(getString(R.string.orders), 3, 1)\n                    showSelected(getString(R.string.Settings), 4, 0)\n                }\n\n            } else if (switch == \"1\" && type == \"2\") {\n\n                if (Constant.startFirstTime == true) {\n                    Constant.startFirstTime =false\n                    Constant.stopBacgroundTimer = 0\n                    showWhatsappIconBlinking()\n\n                }\n                showChatCount()//show chat count\n                homeToolbar.chat.visibility = View.VISIBLE\n                homeToolbar.whatsAppText.visibility = View.VISIBLE\n                homeToolbar.whatsAppTextICons.visibility = View.VISIBLE\n                homeToolbar.refferal.visibility = View.GONE\n                homeToolbar.checkTotalCredits.visibility = View.GONE\n                homeToolbar.setSearch.visibility = View.GONE\n                sellernav.visibility = View.VISIBLE\n                buyernav.visibility = View.GONE\n                AddressLayout.visibility = View.GONE\n\n//                val firstTime = Constant.getPrefs(this)\n//                    .getString(Constant.is_seller_first_time, \"\")\n//                if (firstTime == \"1\") {\n//                    firstTimeCaiguruDialog()//set the popup first time\n//                }\n                //   mbinding.sellernav.setOnNavigationItemSelectedListener(this)\n                loadFragment(HomeSellerFragment())\n                if (sellerSelectedTap == 0) {\n                    showSelected(getString(R.string.home), 0, 0)\n                    showSelected(getString(R.string.sell_now), 1, 1)\n                    showSelected(getString(R.string.orders), 3, 1)\n                    showSelected(getString(R.string.Settings), 4, 1)\n                } else if (sellerSelectedTap == 1) {\n                    showSelected(getString(R.string.home), 0, 1)\n                    showSelected(getString(R.string.sell_now), 1, 0)\n                    showSelected(getString(R.string.orders), 3, 1)\n                    showSelected(getString(R.string.Settings), 4, 1)\n                } else if (sellerSelectedTap == 3) {\n                    showSelected(getString(R.string.home), 0, 1)\n                    showSelected(getString(R.string.sell_now), 1, 1)\n                    showSelected(getString(R.string.orders), 3, 0)\n                    showSelected(getString(R.string.Settings), 4, 1)\n                } else if (sellerSelectedTap == 4) {\n                    showSelected(getString(R.string.home), 0, 1)\n                    showSelected(getString(R.string.sell_now), 1, 1)\n                    showSelected(getString(R.string.orders), 3, 1)\n                    showSelected(getString(R.string.Settings), 4, 0)\n                }\n            } else {\n                showChatCount()//show chat count\n                showAdressOnHomePage()//show home Adress\n                Constant.startFirstTime =true\n                Constant.stopBacgroundTimer = 1\n                homeToolbar.chat.visibility = View.VISIBLE\n                homeToolbar.refferal.visibility = View.VISIBLE\n                homeToolbar.checkTotalCredits.visibility = View.GONE\n                homeToolbar.whatsAppText.visibility = View.GONE\n                homeToolbar.whatsAppTextICons.visibility = View.GONE\n                homeToolbar.setSearch.visibility = View.VISIBLE\n                buyernav.visibility = View.VISIBLE\n                sellernav.visibility = View.GONE\n                AddressLayout.visibility = View.VISIBLE\n                loadFragment(HomeBuyerFragment())\n                textToolbarTitle.text = getString(R.string.home)\n                mBottomNavigationBuyer.menu.getItem(0).isChecked = true\n            }\n\n        })\n        //************failure observer************//\n        mvmodel.errorget().observe(this, Observer {\n            DashBoardProgress.visibility = View.GONE\n            //hideLoader()\n            //    Toast.makeText(this, it.message, Toast.LENGTH_SHORT).show()\n            Constant.showToast(it.message, this)\n        })\n\n        //******************observer of get profile*****************//\n        viewModelDashBoard.getdataProfile().observe(this, Observer {\n            //start the background webServices\n\n//            if (firstTimeBackGroundApiHit == 0) {\n//                Log.e(\"bgApiHIt1\",firstTimeBackGroundApiHit.toString())\n//               // startService(Intent(this, MyBackgroundServices::class.java))\n//                viewModelDashBoard.hitBackGroundService()\n//                firstTimeBackGroundApiHit = 1\n//            }\n//            else {\n//                Log.e(\"bgApiHIt1\",firstTimeBackGroundApiHit.toString())\n//                stopService(Intent(this, MyBackgroundServices::class.java))\n//            }\n            if (resultCode1 == \"1010\") {\n                resultCode1 = \"0\"\n                if (it.unreadcount == \"0\" || it.unreadcount.isEmpty()) {\n                    homeToolbar.chat.visibility = View.VISIBLE\n                    homeToolbar.toolbarMesageButton.visibility = View.GONE\n                } else {\n                    homeToolbar.toolbarMesageButton.visibility = View.VISIBLE\n                    homeToolbar.toolbarMesageButton.text = it.unreadcount\n                }\n            }\n\n            val seller_active_status =\n                Constant.getPrefs(this).getString(Constant.seller_active_status, \"\")\n            if (seller_active_status == \"1\") {\n                mBottomNavigationSeller.menu.getItem(2).setIcon(R.drawable.ic_active)\n                changeTitleColor(1)\n            } else {\n                mBottomNavigationSeller.menu.getItem(2).setIcon(R.drawable.ic_inactive)\n                changeTitleColor(2)\n            }\n//****************show dialog first time***************//\n            if (showDialog == 0) {\n                val gson = Gson()\n                val json = Constant.getPrefs(this).getString(\"profile\", \"1\")\n                val typeCheck = Constant.getPrefs(this).getString(Constant.type, \"\")\n                if (json == \"1\" && typeCheck == \"1\") {\n                    getLastLocation()//finding the location\n                } else {\n                    if (json != \"1\") {\n                        val profileModel = gson.fromJson(json, GetProfileModel::class.java)\n                        if (profileModel.lat.isEmpty() && profileModel.long.isEmpty()) {\n                            getLastLocation()//finding the location\n                        }\n                    }\n                }\n            }\n            //***********scheck the location enable or not?\n            // getLastLocation()//finding the location\n            activateLocationClick()\n            if (Constant.UpdateAddressInBackGround == \"0\") {\n                showAdressOnHomePage()\n            } else {\n                Constant.UpdateAddressInBackGround = \"1\"\n            }\n            viewModelDashBoard.hitBackGroundService()\n        })\n        //*********************failure of get profile\n        viewModelDashBoard.errorgetProfile().observe(this, Observer {\n            //   Toast.makeText(this, it.message, Toast.LENGTH_SHORT).show()\n            Constant.showToast(it.message, this)\n            val intent = Intent(this, NetworkErrorActivity::class.java)\n            intent.setFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)\n            startActivity(intent)\n        })\n\n//*******************************************Seller Status active inactive ******************//\n        mvmodel.getsellerStatus().observe(this, Observer {\n            progress.visibility = View.GONE\n            if (sellerSelectedTap == 0) {\n                viewModelDashBoard.getProfile(tokenFirebase)//get profile Api\n                loadFragment(HomeSellerFragment())\n                if (Constant.startFirstTime == true) {\n                    showWhatsappIconBlinking()\n                    Constant.stopBacgroundTimer = 0\n                }\n                homeToolbar.chat.visibility = View.VISIBLE\n                homeToolbar.whatsAppText.visibility = View.VISIBLE\n                homeToolbar.whatsAppTextICons.visibility = View.VISIBLE\n                homeToolbar.refferal.visibility = View.GONE\n                showChatCount()//show chat count\n                homeToolbar.checkTotalCredits.visibility = View.GONE\n                homeToolbar.setSearch.visibility = View.GONE\n                mBottomNavigationSeller.menu.getItem(0).isChecked = true\n                mBottomNavigationSeller.menu.getItem(0)\n                    .setIcon(R.drawable.ic_home_active_seller)\n                mBottomNavigationSeller.menu.getItem(1)\n                    .setIcon(R.drawable.ic_shoppinglist_inactive_seller)\n                val seller_active_status =\n                    Constant.getPrefs(this).getString(Constant.seller_active_status, \"\")\n                if (seller_active_status == \"1\") {\n                    mBottomNavigationSeller.menu.getItem(2).setIcon(R.drawable.ic_active)\n                    changeTitleColor(1)\n                } else {\n                    mBottomNavigationSeller.menu.getItem(2).setIcon(R.drawable.ic_inactive)\n                    changeTitleColor(2)\n                }\n\n                mBottomNavigationSeller.menu.getItem(3).setIcon(R.drawable.ic_cart_inactive)\n                mBottomNavigationSeller.menu.getItem(4)\n                    .setIcon(R.drawable.ic_setting_inactive_seller)\n\n            } else if (sellerSelectedTap == 1) {\n                mBottomNavigationSeller.menu.getItem(1).isChecked = true\n                mBottomNavigationSeller.menu.getItem(1).isChecked = true\n                mBottomNavigationSeller.menu.getItem(0)\n                    .setIcon(R.drawable.ic_home_inactive_seller)\n                mBottomNavigationSeller.menu.getItem(1)\n                    .setIcon(R.drawable.ic_shoppinglist_active_seller)\n                mBottomNavigationSeller.menu.getItem(3).setIcon(R.drawable.ic_cart_inactive)\n                mBottomNavigationSeller.menu.getItem(4)\n                    .setIcon(R.drawable.ic_setting_inactive_seller)\n                val seller_active_status =\n                    Constant.getPrefs(this).getString(Constant.seller_active_status, \"\")\n                if (seller_active_status == \"1\") {\n                    mBottomNavigationSeller.menu.getItem(2).setIcon(R.drawable.ic_active)\n                    changeTitleColor(1)\n                } else {\n                    mBottomNavigationSeller.menu.getItem(2).setIcon(R.drawable.ic_inactive)\n                    changeTitleColor(2)\n                }\n\n                loadFragment(ShopListSellerFragment())\n            } else if (sellerSelectedTap == 3) {\n                mBottomNavigationSeller.menu.getItem(3).isChecked = true\n                loadFragment(SellerOrderFragment())\n                textToolbarTitle.text = getString(R.string.orders)\n                mBottomNavigationSeller.menu.getItem(0)\n                    .setIcon(R.drawable.ic_home_inactive_seller)\n                mBottomNavigationSeller.menu.getItem(1)\n                    .setIcon(R.drawable.ic_shoppinglist_inactive_seller)\n                val seller_active_status =\n                    Constant.getPrefs(this).getString(Constant.seller_active_status, \"\")\n                if (seller_active_status == \"1\") {\n                    mBottomNavigationSeller.menu.getItem(2).setIcon(R.drawable.ic_active)\n                    changeTitleColor(1)\n                } else {\n                    mBottomNavigationSeller.menu.getItem(2).setIcon(R.drawable.ic_inactive)\n                    changeTitleColor(2)\n\n                }\n                mBottomNavigationSeller.menu.getItem(3).setIcon(R.drawable.ic_cart_active)\n                mBottomNavigationSeller.menu.getItem(4)\n                    .setIcon(R.drawable.ic_setting_inactive_seller)\n\n            } else if (sellerSelectedTap == 4) {\n                mBottomNavigationSeller.menu.getItem(4).isChecked = true\n                loadFragment(SellerSettingFragment())\n                textToolbarTitle.text = getString(R.string.Settings)\n                mBottomNavigationSeller.menu.getItem(4).isChecked = true\n                mBottomNavigationSeller.menu.getItem(0)\n                    .setIcon(R.drawable.ic_home_inactive_seller)\n                mBottomNavigationSeller.menu.getItem(1)\n                    .setIcon(R.drawable.ic_shoppinglist_inactive_seller)\n                val seller_active_status =\n                    Constant.getPrefs(this).getString(Constant.seller_active_status, \"\")\n                if (seller_active_status == \"1\") {\n                    mBottomNavigationSeller.menu.getItem(2).setIcon(R.drawable.ic_active)\n                    //  mBottomNavigationSeller.menu.getItem(2).setTitle\n                    changeTitleColor(1)\n                } else {\n                    mBottomNavigationSeller.menu.getItem(2).setIcon(R.drawable.ic_inactive)\n                    changeTitleColor(2)\n\n                }\n                mBottomNavigationSeller.menu.getItem(3).setIcon(R.drawable.ic_cart_inactive)\n                mBottomNavigationSeller.menu.getItem(4)\n                    .setIcon(R.drawable.ic_setting_active_seller)\n\n            }\n            mBottomNavigationSeller.setOnNavigationItemSelectedListener(this)\n            //   Toast.makeText(this, it.message, Toast.LENGTH_SHORT).show()\n            Constant.showToast(it.message, this)\n\n        })\n        //************failure observer************//\n        mvmodel.errorgetStatus().observe(this, Observer {\n            progress.visibility = View.GONE\n            // Toast.makeText(this, it.message, Toast.LENGTH_SHORT).show()\n            Constant.showToast(it.message, this)\n        })\n\n//***********observer of update address by the first time dialog\n        viewModelDashBoard.mUpdateAddress().observe(this, Observer {\n            try {\n                //clear the address model\n                ClearAddressData()\n                addressDialog.updateButtonWait.visibility = View.GONE\n                addressDialog.updateButton.visibility = View.VISIBLE\n                activateLocationLayout.visibility = View.GONE//hide location activation screen\n                Constant.showToast(getString(R.string.Address_updated_sucessfully), this)\n                addressDialog.dismiss()\n                //*****************address set  because they will not update the address first time\n                toolbarAdressHome.visibility = View.VISIBLE\n                toolbarAdressHome.setText(it.address)\n                // viewModelDashBoard.getProfile(tokenFirebase)//get profile Api\n                showChatCount()//show chat count\n                showAdressOnHomePage()\n                homeToolbar.chat.visibility = View.VISIBLE\n                homeToolbar.refferal.visibility = View.VISIBLE\n                homeToolbar.checkTotalCredits.visibility = View.GONE\n                Constant.stopBacgroundTimer = 1\n                Constant.startFirstTime =true\n                homeToolbar.whatsAppText.visibility = View.GONE\n                homeToolbar.whatsAppTextICons.visibility = View.GONE\n                homeToolbar.setSearch.visibility = View.VISIBLE\n                AddressLayout.visibility = View.VISIBLE\n                buyernav.visibility = View.VISIBLE\n                sellernav.visibility = View.GONE\n                loadFragment(HomeBuyerFragment())\n                textToolbarTitle.text = getString(R.string.home)\n                mBottomNavigationBuyer.menu.getItem(0).isChecked = true\n            } catch (e: java.lang.Exception) {\n                e.printStackTrace()\n                Log.e(\"firstTimeAddressCrash\", e.toString())\n            }\n        })\n//****************address failure observer\n        viewModelDashBoard.failueAddress().observe(this, Observer {\n            Constant.showToast(it, this)\n            addressDialog.dismiss()\n            addressDialog.updateButtonWait.visibility = View.GONE\n            addressDialog.updateButton.visibility = View.VISIBLE\n        })\n\n        //***********notification observer***********//\n        viewModelDashBoard.mSucessfulNotification().observe(this, Observer {\n            getNotificationModel = it\n            if (it.isEmpty()) {\n                viewPagerLayout.visibility = View.GONE\n                viewPager.visibility = View.GONE\n                indicator_login.visibility = View.GONE\n                ViewPagerSkipButton.visibility = View.GONE\n            } else {\n                viewPagerLayout.visibility = View.VISIBLE\n                viewPager.visibility = View.VISIBLE\n                indicator_login.visibility = View.VISIBLE\n                ViewPagerSkipButton.visibility = View.VISIBLE\n                myCustomPagerAdapter =\n                    CustomPagerAdapter(\n                        this,\n                        it\n                    )\n                viewPager.setPageTransformer(\n                    true,\n                    ZoomOutPageTransformer()\n                )\n                viewPager!!.adapter = myCustomPagerAdapter\n                viewPagerIndicator()\n            }\n        })\n        //************failure observer************//\n        viewModelDashBoard.mFailure().observe(this, Observer {\n            //   Toast.makeText(this, it, Toast.LENGTH_SHORT).show()\n            Constant.showToast(it, this)\n            viewPagerLayout.visibility = View.GONE\n            viewPager.visibility = View.GONE\n            indicator_login.visibility = View.GONE\n            ViewPagerSkipButton.visibility = View.GONE\n        })\n\n        //************buyer shopping list posted observer***********************//\n        viewModelDashBoard.mSucessfulCreateShoppingList().observe(this, Observer {\n            PleasWait.visibility = View.GONE\n            done.visibility = View.VISIBLE\n            val intent = Intent(this, BuyerShoppingListPostedActivity::class.java)\n            intent.putExtra(\"keyshopping\", it)\n            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)\n            startActivityForResult(intent, 999)\n        })\n        //***********************failure case\n        viewModelDashBoard.mFailureShoppingError().observe(this, Observer {\n            //visibilty\n            PleasWait.visibility = View.GONE\n            done.visibility = View.VISIBLE\n            val msg = it\n            showErrorDialog(msg)\n        })\n\n    }\n\n    private fun switchSellerBuyerCheckFirstTime() {\n        DashBoardProgress.visibility = View.VISIBLE\n        //***********************************switching or type api********************//\n        val type1 = Constant.getPrefs(this).getString(Constant.type, \"\")\n        val switch1 = Constant.getPrefs(this).getString(Constant.switch_active, \"\")\n        if (switch1 == \"2\" && type1 == \"2\") {\n            //seller notification api\n            if (!intent.hasExtra(\"source_id\")) {\n                viewModelDashBoard.getHomeSellerNotification(tokenUser)\n            }\n            mvmodel.switch_setting(\"2\", \"2\")//both permanent ths user is seller\n        } else if (switch1 == \"1\" && type1 == \"2\") {//not permanent but seller\n            //seller notification api\n            if (!intent.hasExtra(\"source_id\")) {\n                viewModelDashBoard.getHomeSellerNotification(tokenUser)\n            }\n            mvmodel.switch_setting(\"1\", \"2\")\n        } else {\n            //buyer notification api\n            if (!intent.hasExtra(\"source_id\")) {\n\n                viewModelDashBoard.getHomePageBuyerNotification(tokenUser)\n            }\n            mvmodel.switch_setting(\"1\", \"1\")//not permanent but buyer\n        }\n        // permanently switch to seller switch 2\n        // not permanently switch to seller switch 1\n        //type 1 buyer and 2 for seller\n    }\n\n    private fun toolBarSet() {\n        val toolbar = findViewById<Toolbar>(R.id.homeToolbar)\n        title = \"\"\n        textToolbarTitle = findViewById(R.id.toolbartittle)\n        textToolbarTitle.text = getString(R.string.home_screen_title)\n        setSupportActionBar(toolbar)\n        setBuyerHomeAddressTop()\n        toolbarAdressHome.visibility = View.INVISIBLE\n        tokenUser = \"Bearer \" + Constant.getPrefs(this).getString(\n            Constant.token,\n            \"\"\n        )\n    }\n\n    private fun LOgoutBannedUser() {\n        viewModelDashBoard.logoutBannedUser().observe(this, Observer {\n            //    Toast.makeText(this, it.message, Toast.LENGTH_SHORT).show()\n            Constant.showToast(it.message, this)\n            val intent = Intent(this, LoginActivity::class.java)\n            startActivity(intent)\n            finish()\n        })\n    }\n\n    //***************************buyer homePage Top address code*****************//\n    private fun setBuyerHomeAddressTop() {\n        AddressLayout.setOnClickListener {\n//set the dialog on click\n            addAddressHomeCustomDialog()\n        }\n    }\n\n    //*********************filling address first time *****************//\n    private fun addAddressCustomDialog(addressModel: DeliveryZoneModel) {\n        // *********************************** Add Address by custom dialog ******************************************//\n//        addressDialog = Dialog(this)\n        addressDialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\n        addressDialog.setContentView(R.layout.buyer_add_address_dialog)\n        addressDialog.setCancelable(false)\n        addressDialog.show()\n        showDialog = 1\n        addressDialog.addresspleaseSelect.text = getString(R.string.is_this_your_address)\n        addressDialog.textfeed.visibility = View.VISIBLE\n        addressDialog.addressHome.visibility = View.VISIBLE//edttext field visible\n        addressDialog.address.visibility = View.INVISIBLE//textfield\n        addressDialog.EdtMapLocation.visibility = View.VISIBLE\n        addressDialog.addressHome.filters = arrayOf<InputFilter>(HideEmoji(this))\n        if (addressModel.address.isNotEmpty()) {\n            addressDialog.addressHome.setText(addressModel.address)\n            optionalDeliveryZoneModel.address = addressDialog.addressHome.text.toString()\n                .trim()//set the address if they change anything\n        }\n        //set the click button of custom dialog\n        addressDialog.viewmap.setOnClickListener {\n            optionalDeliveryZoneModel.address = addressDialog.addressHome.text.toString()\n                .trim()//set the address if they change anything\n\n            val intent = Intent(this, BuyerAddressMapBoxActivity::class.java)\n            intent.putExtra(\"keyChooseSellerLat\", this.optionalDeliveryZoneModel.lat)\n            intent.putExtra(\"keyChooseSellerLong\", this.optionalDeliveryZoneModel.long)\n            intent.putExtra(\"SelectAddressHome\", \"Select address\")\n            intent.putExtra(\"firstTimelocationKey\", \" address\")\n            intent.putExtra(\"MapType\", this.optionalDeliveryZoneModel.address)\n            startActivityForResult(intent, 129)\n        }\n        //************set the click on the edit\n        addressDialog.EdtMapLocation.setOnClickListener {\n            optionalDeliveryZoneModel.address = addressDialog.addressHome.text.toString()\n                .trim()//set the address if they change anything\n\n            val intent = Intent(this, BuyerAddressMapBoxActivity::class.java)\n            intent.putExtra(\"keyChooseSellerLat\", this.optionalDeliveryZoneModel.lat)\n            intent.putExtra(\"keyChooseSellerLong\", this.optionalDeliveryZoneModel.long)\n            intent.putExtra(\"SelectAddressHome\", \"Select address\")\n            intent.putExtra(\"MapType\", this.optionalDeliveryZoneModel.address)\n            startActivityForResult(intent, 129)\n        }\n\n\n        addressDialog.updateButton.setOnClickListener {\n            if (addressDialog.addressHome.text.isEmpty()) {\n                Constant.showToast(getString(R.string.Please_Enter_your_Address), this)\n            } else if (this.optionalDeliveryZoneModel.lat.isEmpty()) {\n\n                Constant.showToast(getString(R.string.Reselect_address), this)\n            } else {\n                //setFirstTimeUserData()//first time video popup add the status  to visble the video dialog\n//*********api hit\n                optionalDeliveryZoneModel.address = addressDialog.addressHome.text.toString()\n                viewModelDashBoard.updatedAddress(this.optionalDeliveryZoneModel)\n                addressDialog.updateButtonWait.visibility = View.VISIBLE\n                addressDialog.updateButton.visibility = View.GONE\n            }\n\n        }\n        addressDialog.cancel.setOnClickListener {\n            addressDialog.dismiss()\n        }\n    }\n\n    private fun showAlertLocationEnabled() {\n        val mDialog = AlertDialog.Builder(this)\n            .setTitle(getString(R.string.alert))\n            .setMessage(getString(R.string.User_location_are_required))\n        mDialog.setPositiveButton(\n            getString(R.string.ok)\n        ) { dialog, which ->\n            startActivityForResult(\n                Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS),\n                0\n            )\n        }\n\n        mDialog.show()\n    }\n\n    private fun AlertUserAddProductAfterFive(model: PostBuyerShopListModel) {\n\n        val mDialog = android.app.AlertDialog.Builder(this)\n        mDialog.setTitle(getString(R.string.alert))\n        val credits = Constant.getProfileData(this).credits.toDouble().toInt().toString()\n\n        mDialog.setMessage(\n            \"${getString(R.string.You_need_to_pay)} ${creditPerProduct} ${getString(R.string.credit_for_additional)} $freeProducts ${\n                getString(\n                    R.string.products\n                )\n            }. ${getString(R.string.credits_in_your_account)}: ${credits} ${getString(R.string.cr)}\"\n        )\n        mDialog.setPositiveButton(\n            getString(R.string.yes)\n        ) { dialog, which ->\n            if (buyerCredits.toDouble() < model.credDitToDeduct) {\n                //                    Toast.makeText(this, getString(R.string.You_have_no_credits), Toast.LENGTH_LONG)\n                //                        .show()\n                Constant.showToast(getString(R.string.You_have_no_credits), this)\n                dialog.cancel()\n            } else {\n                viewModelDashBoard.createShoppingList(\n                    model.listingname,\n                    model.category_id,\n                    model.deliveryZoneJsonList,\n                    model.daysTimeZoneJsonArray,\n                    model.shoppingProductListJSonArray,\n                    model.listId,\n                    model.credDitToDeduct\n                )\n            }\n\n\n        }\n        mDialog.setNegativeButton(\n            getString(R.string.no)\n        ) { dialog, which ->\n            dialog.cancel()\n\n        }\n        mDialog.show()\n    }\n\n    private fun showErrorDialog(msg: String?) {\n        //error dialog case of failure\n        val mDialog = AlertDialog.Builder(this)\n        mDialog.setTitle(getString(R.string.alert))\n        mDialog.setMessage(msg)\n        mDialog.setPositiveButton(\n            getString(R.string.ok)\n        ) { dialog, which ->\n            dialog.cancel()\n\n        }\n        mDialog.show()\n    }\n\n    //viewPagerIndicator\n    fun viewPagerIndicator() {\n        try {\n\n\n            val indicatorWidth = (TypedValue.applyDimension(\n                TypedValue.COMPLEX_UNIT_DIP, 10f,\n                resources.displayMetrics\n            ) + 0.5f).toInt()\n            val indicatorHeight = (TypedValue.applyDimension(\n                TypedValue.COMPLEX_UNIT_DIP, 4f,\n                resources.displayMetrics\n            ) + 0.5f).toInt()\n            val indicatorMargin = (TypedValue.applyDimension(\n                TypedValue.COMPLEX_UNIT_DIP, 6f,\n                resources.displayMetrics\n            ) + 0.5f).toInt()\n\n            val config = Config.Builder().width(indicatorWidth)\n                .height(indicatorHeight)\n                .margin(indicatorMargin)\n                .drawable(R.drawable.counter_bg)\n                .drawableUnselected(R.drawable.rectctangle_full_white)\n                .build()\n\n            indicator_login.initialize(config)\n            viewPager!!.adapter =\n                CustomPagerAdapter(\n                    this,\n                    getNotificationModel\n                )//set the adapter\n            indicator_login.setViewPager(viewPager)\n        } catch (e: java.lang.Exception) {\n            e.printStackTrace()\n        }\n    }\n\n    //***************set the observer to hide the button buyer post shopping list fragment\n    override fun buttonHide() {\n        done.visibility = View.VISIBLE\n        PleasWait.visibility = View.GONE\n    }\n    //************************************initialize the bottom navigation that user are which side in liast time***********************************************************//\n\n    private fun init() {\n        mBottomNavigationBuyer = findViewById(R.id.buyernav)\n        mBottomNavigationSeller = findViewById(R.id.sellernav)\n        mBottomNavigationBuyer.setOnNavigationItemSelectedListener(this)\n        mBottomNavigationSeller.setOnNavigationItemSelectedListener(this)\n        mBottomNavigationSeller.setItemIconTintList(null)\n        val type = Constant.getPrefs(this).getString(Constant.type, \"\")\n\n        if (type == \"1\") {\n            mBottomNavigationBuyer.visibility = View.VISIBLE\n            mBottomNavigationSeller.visibility = View.GONE\n        } else {\n            mBottomNavigationBuyer.visibility = View.GONE\n            mBottomNavigationSeller.visibility = View.VISIBLE\n        }\n\n        val seller_active_status =\n            Constant.getPrefs(this).getString(Constant.seller_active_status, \"\")\n        if (seller_active_status == \"1\") {\n            mBottomNavigationSeller.menu.getItem(2).setIcon(R.drawable.ic_active)\n            changeTitleColor(1)\n        } else {\n            mBottomNavigationSeller.menu.getItem(2).setIcon(R.drawable.ic_inactive)\n            changeTitleColor(2)\n        }\n        showChatCount()//show chat count\n        homeToolbar.chat.visibility = View.VISIBLE\n\n    }\n\n    fun changeTitleColor(i: Int) {\n        if (i == 1) {\n            val s = SpannableString(getString(R.string.Active))\n            s.setSpan(ForegroundColorSpan(resources.getColor(R.color.green)), 0, s.length, 0)\n            mBottomNavigationSeller.menu.getItem(2).title = s\n        } else {\n            val s = SpannableString(getString(R.string.Inactive))\n            s.setSpan(ForegroundColorSpan(resources.getColor(R.color.red)), 0, s.length, 0)\n            mBottomNavigationSeller.menu.getItem(2).title = s\n        }\n    }\n\n    override fun onResume() {\n        super.onResume()\n        viewModelDashBoard.getProfile(tokenFirebase)\n        val isFinish = Constant.getPrefs(this).getString(\"finish\", \"no\")\n        if (isFinish == \"yes\") {\n            Constant.getPrefs(this).edit().putString(\"finish\", \"\").apply()\n        }\n        if (fragmentCurrent is BuyerPostShoppingListFragment) {\n            loadFragment(fragmentCurrent)\n        }\n\n    }\n\n    //****************************************** set Menu in toolbar ****************************//\n    override fun onCreateOptionsMenu(menu: Menu?): Boolean {\n        getMenuInflater().inflate(R.menu.choose_seller_menu, menu)\n        menuMain = menu\n        return true\n    }\n\n    //***************************************Click on menu*******************************//\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\n\n        if (item!!.itemId == R.id.location) {\n            if (fragmentCurrent is ChooseSellerFragment) {\n                (fragmentCurrent as ChooseSellerFragment).callMenuDialog()\n            }\n        }\n        return super.onOptionsItemSelected(item)\n    }\n\n    //*****************************navigation click**********************************************************//\n    @RequiresApi(Build.VERSION_CODES.M)\n    override fun onNavigationItemSelected(p0: MenuItem): Boolean {\n        val type = Constant.getPrefs(this).getString(Constant.type, \"\")\n        if (type == \"1\") {\n            when (p0.itemId) {\n                R.id.buyer_home -> {\n                    position = 0\n                    homeToolbar.done.visibility = View.GONE\n                    sellernav.visibility = View.GONE\n                    buyernav.visibility = View.VISIBLE\n                    ClearAddressData()//clear the address\n                    // viewModelDashBoard.getProfile(tokenFirebase)//get profile Api\n                    homeToolbar.chat.visibility = View.VISIBLE\n                    homeToolbar.refferal.visibility = View.VISIBLE\n                    homeToolbar.setSearch.visibility = View.VISIBLE\n                    homeToolbar.checkTotalCredits.visibility = View.GONE\n                    Constant.stopBacgroundTimer = 1\n                    Constant.startFirstTime =true\n                    homeToolbar.whatsAppText.visibility = View.GONE\n                    homeToolbar.whatsAppTextICons.visibility = View.GONE\n                    AddressLayout.visibility = View.VISIBLE\n                    loadFragment(HomeBuyerFragment())\n                    textToolbarTitle.text = getString(R.string.home)\n                    mBottomNavigationBuyer.menu.getItem(0).isChecked = true\n                    showChatCount()//show chat count\n                    showAdressOnHomePage()\n                }\n                R.id.buyer_seller -> {\n                    position = 1\n                    homeToolbar.done.visibility = View.GONE\n                    ClearAddressData()//clear the address\n                    loadFragment(ChooseSellerFragment())\n                    textToolbarTitle.text = getString(R.string.choose_seller)\n                    homeToolbar.chat.visibility = View.GONE\n                    AddressLayout.visibility = View.GONE\n                    homeToolbar.refferal.visibility = View.GONE\n                    homeToolbar.whatsAppText.visibility = View.GONE\n                    Constant.stopBacgroundTimer = 1\n                    Constant.startFirstTime =true\n                    homeToolbar.whatsAppTextICons.visibility = View.GONE\n                    homeToolbar.checkTotalCredits.visibility = View.GONE\n                    homeToolbar.setSearch.visibility = View.GONE\n                    mBottomNavigationBuyer.menu.getItem(1).isChecked = true\n                }\n\n                R.id.buyer_post -> {\n                    position = 2\n                    val list = getSelectedCitiesList()\n                    if (list.size == 0) {\n                        val launchIntent = Intent(this, SelectCitiesActivity::class.java)\n                        launchIntent.putExtra(\"switch\", \"1\")\n                        launchIntent.putExtra(\"type\", \"1\")\n                        launchIntent.putExtra(\"from\", \"2\")\n                        launchIntent.putExtra(\"keyHideButton\", \"hide\")\n                        // finish()\n                        startActivityForResult(launchIntent, 1234)\n\n                    } else {\n                        loadFragment(BuyerPostShoppingListFragment())\n                        textToolbarTitle.text = getString(R.string.post_shopping_list)\n                        homeToolbar.done.visibility = View.VISIBLE\n                        homeToolbar.chat.visibility = View.GONE\n                        homeToolbar.whatsAppText.visibility = View.GONE\n                        Constant.stopBacgroundTimer = 1\n                        Constant.startFirstTime =true\n                        homeToolbar.whatsAppTextICons.visibility = View.GONE\n                        ClearAddressData()//clear the address\n                        AddressLayout.visibility = View.GONE\n                        homeToolbar.refferal.visibility = View.GONE\n                        homeToolbar.checkTotalCredits.visibility = View.VISIBLE\n                        homeToolbar.setSearch.visibility = View.GONE\n                        mBottomNavigationBuyer.menu.getItem(2).isChecked = true\n                    }\n\n                }\n                R.id.buyer_shopping_list -> {\n                    position = 3\n                    loadFragment(BuyerShoppingFragment())\n                    homeToolbar.done.visibility = View.GONE\n                    ClearAddressData()//clear the address\n                    textToolbarTitle.text = getString(R.string.shopping_list)\n                    homeToolbar.chat.visibility = View.GONE\n                    AddressLayout.visibility = View.GONE\n                    homeToolbar.refferal.visibility = View.GONE\n                    homeToolbar.whatsAppText.visibility = View.GONE\n                    Constant.stopBacgroundTimer = 1\n                    Constant.startFirstTime =true\n                    homeToolbar.whatsAppTextICons.visibility = View.GONE\n                    homeToolbar.checkTotalCredits.visibility = View.GONE\n                    homeToolbar.setSearch.visibility = View.GONE\n                    //toolbar.inflateMenu(R.menu.choose_seller_menu)\n                    mBottomNavigationBuyer.menu.getItem(3).isChecked = true\n                }\n                R.id.buyer_setting -> {\n                    homeToolbar.chat.visibility = View.GONE\n                    val json = Constant.getPrefs(this).getString(Constant.PROFILE, \"1\")\n                    if (json != \"1\") {\n                        position = 4\n                        viewModelDashBoard.getProfile(tokenFirebase)\n                        loadFragment(BuyerSettingFragment())\n                        ClearAddressData()//clear the address\n                        textToolbarTitle.text = getString(R.string.Settings)\n                        homeToolbar.chat.visibility = View.GONE\n                        AddressLayout.visibility = View.GONE\n                        homeToolbar.refferal.visibility = View.GONE\n                        homeToolbar.whatsAppText.visibility = View.GONE\n                        Constant.stopBacgroundTimer = 1\n                        Constant.startFirstTime =true\n                        homeToolbar.whatsAppTextICons.visibility = View.GONE\n                        homeToolbar.checkTotalCredits.visibility = View.GONE\n                        homeToolbar.setSearch.visibility = View.GONE\n                        homeToolbar.done.visibility = View.GONE\n                        mBottomNavigationBuyer.menu.getItem(4).isChecked = true\n\n                    } else {\n                        viewModelDashBoard.getProfile(tokenFirebase)\n                    }\n                }\n            }\n\n            if (position == 1) {\n                menuMain!!.findItem(R.id.location).setVisible(true)\n            } else {\n                menuMain!!.findItem(R.id.location).setVisible(false)\n            }\n\n            mBottomNavigationBuyer.visibility = View.VISIBLE\n            mBottomNavigationSeller.visibility = View.GONE\n\n        } else {\n            homeToolbar.chat.visibility = View.VISIBLE\n            viewModelDashBoard.getProfile(tokenFirebase)//get profile Api\n            homeToolbar.refferal.visibility = View.VISIBLE\n            homeToolbar.checkTotalCredits.visibility = View.GONE\n//            Constant.stopBacgroundTimer = 1\n//            Constant.startFirstTime =true\n            homeToolbar.whatsAppText.visibility = View.GONE\n            homeToolbar.whatsAppTextICons.visibility = View.GONE\n            homeToolbar.setSearch.visibility = View.GONE\n            when (p0.itemId) {\n                R.id.homeSeller -> {\n                    sellerSelectedTap = 0\n                    sellernav.visibility = View.VISIBLE\n                    buyernav.visibility = View.GONE\n                    loadFragment(HomeSellerFragment())\n                    textToolbarTitle.text = getString(R.string.home)\n                    showChatCount()//show chat count\n                    showAdressOnHomePage()\n                    if (Constant.startFirstTime == true) {\n                        Constant.startFirstTime =false\n                        Constant.stopBacgroundTimer = 0\n                        showWhatsappIconBlinking()\n\n                    }\n\n                    homeToolbar.chat.visibility = View.VISIBLE\n                    homeToolbar.whatsAppText.visibility = View.VISIBLE\n                    homeToolbar.whatsAppTextICons.visibility = View.VISIBLE\n                    homeToolbar.refferal.visibility = View.GONE\n                    homeToolbar.checkTotalCredits.visibility = View.GONE\n                    homeToolbar.setSearch.visibility = View.GONE\n                    //  mBottomNavigationBuyer.menu.getItem(0).isChecked = false\n                    mBottomNavigationSeller.menu.getItem(0).isChecked = true\n                    mBottomNavigationSeller.menu.getItem(0)\n                        .setIcon(R.drawable.ic_home_active_seller)\n                    mBottomNavigationSeller.menu.getItem(1)\n                        .setIcon(R.drawable.ic_shoppinglist_inactive_seller)\n                    val seller_active_status =\n                        Constant.getPrefs(this).getString(Constant.seller_active_status, \"\")\n\n                    if (seller_active_status == \"1\") {\n                        mBottomNavigationSeller.menu.getItem(2).setIcon(R.drawable.ic_active)\n                        changeTitleColor(1)\n                    } else {\n                        mBottomNavigationSeller.menu.getItem(2).setIcon(R.drawable.ic_inactive)\n                        changeTitleColor(2)\n                    }\n                    mBottomNavigationSeller.menu.getItem(3).setIcon(R.drawable.ic_cart_inactive)\n                    mBottomNavigationSeller.menu.getItem(4)\n                        .setIcon(R.drawable.ic_setting_inactive_seller)\n                }\n\n                R.id.shoppingListSeller -> {\n                    sellerSelectedTap = 1\n                    // viewModelDashBoard.getProfile(tokenFirebase)\n                    loadFragment(ShopListSellerFragment())\n                    textToolbarTitle.text = getString(R.string.sell_now)\n                    homeToolbar.chat.visibility = View.GONE\n                    homeToolbar.whatsAppText.visibility = View.GONE\n                    Constant.stopBacgroundTimer = 1\n                    Constant.startFirstTime =true\n                    homeToolbar.whatsAppTextICons.visibility = View.VISIBLE\n                    AddressLayout.visibility = View.GONE\n                    homeToolbar.refferal.visibility = View.GONE\n                    homeToolbar.checkTotalCredits.visibility = View.GONE\n                    homeToolbar.setSearch.visibility = View.GONE\n                    //  mBottomNavigationBuyer.menu.getItem(1).isChecked = false\n                    mBottomNavigationSeller.menu.getItem(1).isChecked = true\n                    mBottomNavigationSeller.menu.getItem(0)\n                        .setIcon(R.drawable.ic_home_inactive_seller)\n                    mBottomNavigationSeller.menu.getItem(1)\n                        .setIcon(R.drawable.ic_shoppinglist_active_seller)\n\n                    val seller_active_status =\n                        Constant.getPrefs(this).getString(Constant.seller_active_status, \"\")\n\n                    if (seller_active_status == \"1\") {\n                        mBottomNavigationSeller.menu.getItem(2).setIcon(R.drawable.ic_active)\n                        changeTitleColor(1)\n                    } else {\n                        mBottomNavigationSeller.menu.getItem(2).setIcon(R.drawable.ic_inactive)\n                        changeTitleColor(2)\n                    }\n                    mBottomNavigationSeller.menu.getItem(3).setIcon(R.drawable.ic_cart_inactive)\n                    mBottomNavigationSeller.menu.getItem(4)\n                        .setIcon(R.drawable.ic_setting_inactive_seller)\n\n                }\n\n                R.id.sellerActive -> {\n                    if (sellerSelectedTap == 0) {\n                        viewModelDashBoard.getProfile(tokenFirebase)//get profile Api\n                        showChatCount()//show chat count\n                        homeToolbar.chat.visibility = View.VISIBLE\n                        homeToolbar.refferal.visibility = View.VISIBLE\n                        homeToolbar.checkTotalCredits.visibility = View.GONE\n                        homeToolbar.setSearch.visibility = View.GONE\n                    } else {\n                        homeToolbar.chat.visibility = View.GONE\n                        AddressLayout.visibility = View.GONE\n                        homeToolbar.refferal.visibility = View.GONE\n                        homeToolbar.checkTotalCredits.visibility = View.GONE\n                        homeToolbar.setSearch.visibility = View.GONE\n                    }\n                    homeToolbar.whatsAppText.visibility = View.GONE\n                    homeToolbar.whatsAppTextICons.visibility = View.GONE\n                    Constant.stopBacgroundTimer = 1\n                    Constant.startFirstTime =true\n                    val seller_active_status =\n                        Constant.getPrefs(this).getString(Constant.seller_active_status, \"\")\n                    if (seller_active_status == \"1\") {\n                        dialog = Dialog(this)\n                        //   dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)\n                        mBottomNavigationSeller.menu.getItem(2).setIcon(R.drawable.ic_active)\n                        dialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\n                        dialog.setContentView(R.layout.dialog_active)\n                        dialog.dialogInactive.visibility = View.VISIBLE\n                        // dialog.setTitle(\"Inactive\")\n                        dialog.show()\n//************************inactive click\n                        dialog.inactive.setOnClickListener {\n                            progress.visibility = View.VISIBLE\n                            mvmodel.seller_active_status(\"2\")\n                            dialog.dismiss()\n                        }\n\n                    } else {\n                        dialog = Dialog(this)\n                        //  dialog.requestWindowFeature(Window.FEATURE_NO_TITLE)\n                        mBottomNavigationSeller.setItemIconTintList(null)\n                        mBottomNavigationSeller.menu.getItem(2).setIcon(R.drawable.ic_inactive)\n                        dialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\n                        dialog.setContentView(R.layout.dialog_active)\n                        dialog.dialogActive.visibility = View.VISIBLE\n                        // dialog.setTitle(\"Active\")\n                        dialog.show()\n//*************************active click\n                        dialog.active.setOnClickListener {\n                            progress.visibility = View.VISIBLE\n                            mvmodel.seller_active_status(\"1\")\n                            dialog.dismiss()\n                        }\n                    }\n\n                    mBottomNavigationSeller.menu.getItem(2).isChecked = true\n                }\n                R.id.cartSeller -> {\n                    Constant.stopBacgroundTimer = 1\n                    Constant.startFirstTime =true\n                    homeToolbar.chat.visibility = View.GONE\n                    AddressLayout.visibility = View.GONE\n                    homeToolbar.whatsAppText.visibility = View.GONE\n                    homeToolbar.whatsAppTextICons.visibility = View.VISIBLE\n                    homeToolbar.refferal.visibility = View.GONE\n                    homeToolbar.checkTotalCredits.visibility = View.GONE\n                    homeToolbar.setSearch.visibility = View.GONE\n                    sellerSelectedTap = 3\n                    //  mBottomNavigationSeller.menu.getItem(2).setIcon(R.drawable.ic_active)\n                    loadFragment(SellerOrderFragment())\n                    textToolbarTitle.text = getString(R.string.orders)\n                    //  mBottomNavigationBuyer.menu.getItem(1).isChecked = false\n                    mBottomNavigationSeller.menu.getItem(3).isChecked = true\n                    mBottomNavigationSeller.menu.getItem(0)\n                        .setIcon(R.drawable.ic_home_inactive_seller)\n                    mBottomNavigationSeller.menu.getItem(1)\n                        .setIcon(R.drawable.ic_shoppinglist_inactive_seller)\n                    val seller_active_status =\n                        Constant.getPrefs(this).getString(Constant.seller_active_status, \"\")\n\n                    if (seller_active_status == \"1\") {\n                        mBottomNavigationSeller.menu.getItem(2).setIcon(R.drawable.ic_active)\n                        changeTitleColor(1)\n                    } else {\n                        mBottomNavigationSeller.menu.getItem(2).setIcon(R.drawable.ic_inactive)\n                        changeTitleColor(2)\n                    }\n                    mBottomNavigationSeller.menu.getItem(3).setIcon(R.drawable.ic_cart_active)\n                    mBottomNavigationSeller.menu.getItem(4)\n                        .setIcon(R.drawable.ic_setting_inactive_seller)\n\n                }\n\n\n                R.id.settingSeller -> {\n                    //********api hit  for updating the profile  code set in 11-02-2020\n                    val json = Constant.getPrefs(this).getString(Constant.PROFILE, \"1\")\n                    if (json != \"1\") {\n                        Constant.stopBacgroundTimer = 1\n                        Constant.startFirstTime =true\n                        homeToolbar.chat.visibility = View.GONE\n                        AddressLayout.visibility = View.GONE\n                        homeToolbar.refferal.visibility = View.GONE\n                        homeToolbar.checkTotalCredits.visibility = View.GONE\n                        homeToolbar.whatsAppText.visibility = View.GONE\n                        homeToolbar.whatsAppTextICons.visibility = View.GONE\n                        homeToolbar.setSearch.visibility = View.GONE\n                        sellerSelectedTap = 4\n                        viewModelDashBoard.getProfile(tokenFirebase)\n                        loadFragment(SellerSettingFragment())\n                        textToolbarTitle.text = getString(R.string.Settings)\n                        mBottomNavigationSeller.menu.getItem(4).isChecked = true\n                        mBottomNavigationSeller.menu.getItem(0)\n                            .setIcon(R.drawable.ic_home_inactive_seller)\n                        mBottomNavigationSeller.menu.getItem(1)\n                            .setIcon(R.drawable.ic_shoppinglist_inactive_seller)\n                        val seller_active_status =\n                            Constant.getPrefs(this).getString(Constant.seller_active_status, \"\")\n\n                        if (seller_active_status == \"1\") {\n                            mBottomNavigationSeller.menu.getItem(2).setIcon(R.drawable.ic_active)\n                            changeTitleColor(1)\n                        } else {\n                            mBottomNavigationSeller.menu.getItem(2).setIcon(R.drawable.ic_inactive)\n                            changeTitleColor(2)\n                        }\n                        mBottomNavigationSeller.menu.getItem(3).setIcon(R.drawable.ic_cart_inactive)\n                        mBottomNavigationSeller.menu.getItem(4)\n                            .setIcon(R.drawable.ic_setting_active_seller)\n                    } else {\n                        viewModelDashBoard.getProfile(tokenFirebase)\n                    }\n                }\n            }\n            if (sellerSelectedTap == 0) {\n                showSelected(getString(R.string.home), 0, 0)\n                showSelected(getString(R.string.sell_now), 1, 1)\n                showSelected(getString(R.string.orders), 3, 1)\n                showSelected(getString(R.string.Settings), 4, 1)\n            } else if (sellerSelectedTap == 1) {\n                showSelected(getString(R.string.home), 0, 1)\n                showSelected(getString(R.string.sell_now), 1, 0)\n                showSelected(getString(R.string.orders), 3, 1)\n                showSelected(getString(R.string.Settings), 4, 1)\n            } else if (sellerSelectedTap == 3) {\n                showSelected(getString(R.string.home), 0, 1)\n                showSelected(getString(R.string.sell_now), 1, 1)\n                showSelected(getString(R.string.orders), 3, 0)\n                showSelected(getString(R.string.Settings), 4, 1)\n            } else if (sellerSelectedTap == 4) {\n                showSelected(getString(R.string.home), 0, 1)\n                showSelected(getString(R.string.sell_now), 1, 1)\n                showSelected(getString(R.string.orders), 3, 1)\n                showSelected(getString(R.string.Settings), 4, 0)\n            }\n            mBottomNavigationBuyer.visibility = View.GONE\n            mBottomNavigationSeller.visibility = View.VISIBLE\n        }\n        return false\n    }\n\n    private fun showSelected(text: String, sellerSelectedTap: Int, selected: Int) {\n        if (selected == 0) {\n            val s = SpannableString(text)\n            s.setSpan(\n                ForegroundColorSpan(resources.getColor(R.color.colorPrimary)),\n                0,\n                s.length,\n                0\n            )\n            mBottomNavigationSeller.menu.getItem(sellerSelectedTap).title = s\n        } else {\n            val s = SpannableString(text)\n            s.setSpan(\n                ForegroundColorSpan(resources.getColor(R.color.light_grey)),\n                0,\n                s.length,\n                0\n            )\n            mBottomNavigationSeller.menu.getItem(sellerSelectedTap).title = s\n\n        }\n\n    }\n\n    //buyer side\n    private fun loadFragment(fragment1: Fragment) {\n        fragmentCurrent = fragment1\n        val transaction = supportFragmentManager.beginTransaction()\n        transaction.replace(R.id.buyer_frag_Container, fragment1)\n        transaction.commit()\n    }\n\n    //***************************************Seller Switch*****************************************//\n//not permanentlty switch to seller\n    override fun onSwitchChangeNo() {\n        // hideLoader()\n        /*    val list = getSelectedCitiesList()\n        if (list.size == 0) {\n            val launchIntent = Intent(this, SelectCitiesActivity::class.java)\n            launchIntent.putExtra(\"switch\", \"1\")\n            launchIntent.putExtra(\"type\", \"2\")\n            launchIntent.putExtra(\"from\", \"1\")\n            startActivityForResult(launchIntent, 1233)\n\n        } else {\n            // seller notification api\n            if (!intent.hasExtra(\"source_id\")){\n                viewModelDashBoard.getHomeSellerNotification(tokenUser)\n            }\n            Constant.getPrefs(this).edit().putString(Constant.type, \"2\").apply()\n            mvmodel.switch_setting(\"1\", \"2\")\n        }*/\n\n    }\n\n    //permanentlty switch to selller\n    override fun onSwitchChangeYes() {\n        // setFirstTimeUserData()//set userFirstTime Data\n        ClearAddressData()// clear the address\n        val list = getSelectedCitiesList()\n        if (list.size == 0) {\n            val launchIntent = Intent(this, SelectCitiesActivity::class.java)\n            //launchIntent.putExtra(\"switch\", \"2\")\n            launchIntent.putExtra(\"switch\", \"2\")\n            launchIntent.putExtra(\"type\", \"2\")\n            launchIntent.putExtra(\"from\", \"1\")\n            launchIntent.putExtra(\"textSellerSide\", \"1\")\n            startActivityForResult(launchIntent, 1233)\n        } else {\n            DashBoardProgress.visibility = View.VISIBLE\n            // seller notification api\n            if (!intent.hasExtra(\"source_id\")) {\n                viewModelDashBoard.getHomeSellerNotification(tokenUser)\n            }\n            mvmodel.switch_setting(\"2\", \"2\")  // permanently switch to seller switch 2\n            // mvmodel.switch_setting(\"1\", \"2\")\n        }\n    }\n//****************first time user popup show code is commented  as per client requirement\n//    private fun setFirstTimeUserData() {\n//        Constant.getPrefs(this).edit()\n//            .putString(\n//                Constant.is_seller_first_time,\n//                \"1\"\n//            )\n//            .apply()\n//\n//    }\n\n    //****************************************Buyer Switch***********************************//\n    override fun onSwitchChangeBuyerNo() {\n\n    }\n\n    override fun onSwitchChangeBuyerYes() {\n        DashBoardProgress.visibility = View.VISIBLE\n        mvmodel.switch_setting(\"1\", \"1\")\n        if (!intent.hasExtra(\"source_id\")) {\n            viewModelDashBoard.getHomePageBuyerNotification(tokenUser)\n        }\n    }\n\n    override fun onStatus(seller_active_status: String) {\n        if (seller_active_status == \"1\") {\n            mBottomNavigationSeller.menu.getItem(2).setIcon(R.drawable.ic_active)\n            changeTitleColor(1)\n        } else {\n            mBottomNavigationSeller.menu.getItem(2).setIcon(R.drawable.ic_inactive)\n            changeTitleColor(2)\n        }\n    }\n\n    private fun getSelectedCitiesList(): java.util.ArrayList<CitiesModel> {\n        val listCities = ArrayList<CitiesModel>()\n        val profile = Constant.getPrefs(application).getString(Constant.PROFILE, \"\")\n        if (profile!!.isNotEmpty()) {\n            val obj = JSONObject(profile)\n            val citiesArr = obj.optJSONArray(\"sel_cities\")\n\n            for (i in 0 until citiesArr.length()) {\n                val child = citiesArr.optJSONObject(i)\n                val model = CitiesModel()\n                model.id = child.optString(\"id\")\n                model.name = child.optString(\"name\")\n                listCities.add(model)\n            }\n        }\n        return listCities\n    }\n\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        try {\n\n            if (resultCode == 1233) {\n                val tyoe = data!!.getStringExtra(\"type\")!!\n                val switch = data.getStringExtra(\"switch\")!!\n                Constant.getPrefs(this).edit().putString(Constant.type, tyoe)\n                    .apply()\n                mvmodel.switch_setting(switch, tyoe)\n            }\n\n            if (requestCode == 1234) {\n                loadFragment(fragmentCurrent)\n                val from = data!!.getStringExtra(\"from\")\n                if (from != \"2\") {\n\n                    if (fragmentCurrent is BuyerPostShoppingListFragment) {\n                        val model: PostBuyerShopListModel =\n                            (fragmentCurrent as BuyerPostShoppingListFragment).buyer()\n                        if (model.totalCredits > 0) {\n                            viewModelDashBoard.createShoppingList(\n                                model.listingname,\n                                model.category_id,\n                                model.deliveryZoneJsonList,\n                                model.daysTimeZoneJsonArray,\n                                model.shoppingProductListJSonArray,\n                                model.listId,\n                                model.credDitToDeduct\n                            )\n                        } else {\n//                            Toast.makeText(\n//                                this,\n//                                getString(R.string.You_have_no_credits),\n//                                Toast.LENGTH_SHORT\n//                            ).show()\n                            Constant.showToast(getString(R.string.You_have_no_credits), this)\n                        }\n                    }\n                } else {\n                    Constant.stopBacgroundTimer = 1\n                    Constant.startFirstTime =true\n                    buyerPurchaseListAlertDialog()\n                    loadFragment(BuyerPostShoppingListFragment())\n                    textToolbarTitle.text = getString(R.string.post_shopping_list)\n                    homeToolbar.done.visibility = View.VISIBLE\n                    homeToolbar.chat.visibility = View.GONE\n                    AddressLayout.visibility = View.GONE\n                    homeToolbar.refferal.visibility = View.GONE\n                    homeToolbar.checkTotalCredits.visibility = View.VISIBLE\n                    homeToolbar.whatsAppText.visibility = View.GONE\n                    homeToolbar.whatsAppTextICons.visibility = View.GONE\n                    homeToolbar.setSearch.visibility = View.GONE\n                    mBottomNavigationBuyer.menu.getItem(2).isChecked = true\n                }\n            }\n\n        } catch (e: Exception) {\n\n        }\n        if (requestCode == 999) {\n            if (fragmentCurrent is BuyerPostShoppingListFragment) {\n                loadFragment(BuyerPostShoppingListFragment())\n                textToolbarTitle.text = getString(R.string.post_shopping_list)\n                homeToolbar.done.visibility = View.VISIBLE\n                Constant.stopBacgroundTimer = 1\n                Constant.startFirstTime =true\n                homeToolbar.chat.visibility = View.GONE\n                AddressLayout.visibility = View.GONE\n                homeToolbar.refferal.visibility = View.GONE\n                homeToolbar.whatsAppText.visibility = View.GONE\n                homeToolbar.whatsAppTextICons.visibility = View.GONE\n                homeToolbar.checkTotalCredits.visibility = View.VISIBLE\n                homeToolbar.setSearch.visibility = View.GONE\n                mBottomNavigationBuyer.menu.getItem(2).isChecked = true\n            }\n        }\n        //1001 used for run  again home notification api on back\n        if (requestCode == 1001) {\n            val token = \"Bearer \" + Constant.getPrefs(this).getString(\n                Constant.token,\n                \"\"\n            )\n            //this api again hit when they coming back to the notification and refresh it\n            if (!intent.hasExtra(\"source_id\")) {\n                viewModelDashBoard.getHomePageBuyerNotification(tokenUser)\n            }\n        }\n        //1001 used for run  again home notification api on back\n        if (requestCode == 1002) {\n            val token = \"Bearer \" + Constant.getPrefs(this).getString(\n                Constant.token,\n                \"\"\n            )\n            //this api again hit when they coming back to the notification and refresh it\n            if (!intent.hasExtra(\"source_id\")) {\n                viewModelDashBoard.getHomeSellerNotification(tokenUser)\n            }\n\n        }\n\n        if (requestCode == 129 && data != null) {\n            if (resultCode == Activity.RESULT_OK) {\n                try {\n                    val geocoder = Geocoder(this)\n                    val address: Address?\n                    try {\n                        val latitudeResult = data.getStringExtra(\"lat\")\n                        val longitudeResult = data.getStringExtra(\"long\")\n                        // 2\n                        val addresses =\n                            geocoder.getFromLocation(\n                                latitudeResult!!.toDouble(),\n                                longitudeResult!!.toDouble(),\n                                1\n                            )\n                        address = addresses[0]\n                        val builder = StringBuilder()\n                        builder.append(address?.getAddressLine(0)).append(\",\\t\")\n                        val resultDestination = builder.toString()\n                        optionalDeliveryZoneModel = data.getParcelableExtra(\"deliveryZone\")!!\n                        //   optionalDeliveryZoneModel.address = resultDestination\n//                        lat = latitudeResult\n//                        long = longitudeResult\n                        optionalDeliveryZoneModel.lat = latitudeResult!!\n                        optionalDeliveryZoneModel.long = longitudeResult!!\n                        //Addressdatas = resultDestination\n                        if (optionalDeliveryZoneModel.address.isEmpty() && optionalDeliveryZoneModel.lat.isEmpty()) {\n//                            Toast.makeText(\n//                                this,\n//                                getString(R.string.Reselect_address),\n//                                Toast.LENGTH_SHORT\n//                            ).show()\n                            Constant.showToast(getString(R.string.Reselect_address), this)\n                        } else {\n                            addressDialog.addressHome.setText(optionalDeliveryZoneModel.address)\n                        }\n                        Log.e(\"Map Fragment2 \", resultDestination)\n                    } catch (e: IOException) {\n                        Log.e(\"MapsActivity\", e.localizedMessage)\n                    }\n                } catch (e: Exception) {\n                    Log.e(\"MainActivity\", e.message.toString())\n                }\n            }\n        }\n        //toolbar address set\n        else if (requestCode == 112 && data != null) {\n\n            if (resultCode == Activity.RESULT_OK) {\n                try {\n                    val geocoder = Geocoder(this)\n                    val address: Address?\n                    try {\n                        val lat = data.getStringExtra(\"lat\")!!\n                        val long = data.getStringExtra(\"long\")!!\n                        // 2\n                        val addresses =\n                            geocoder.getFromLocation(lat.toDouble(), long.toDouble(), 1)\n                        address = addresses[0]\n                        Log.e(\"Map Fragment \", address.toString())\n                        val builder = StringBuilder()\n                        builder.append(address?.getAddressLine(0)).append(\",\\t\")\n                        val resultDestination = builder.toString()\n                        optionalDeliveryZoneModel = data.getParcelableExtra(\"deliveryZone\")!!\n                        // optionalDeliveryZoneModel.address = resultDestination\n                        if (optionalDeliveryZoneModel.address.isEmpty()) {\n\n                            Constant.showToast(getString(R.string.network_error), this)\n                        } else {\n                            Constant.stopBacgroundTimer = 1\n                            Constant.startFirstTime =true\n                            addressDialog.addressHome.setText(optionalDeliveryZoneModel.address)\n                            homeToolbar.chat.visibility = View.VISIBLE\n                            homeToolbar.refferal.visibility = View.VISIBLE\n                            homeToolbar.checkTotalCredits.visibility = View.GONE\n                            homeToolbar.whatsAppText.visibility = View.GONE\n                            homeToolbar.whatsAppTextICons.visibility = View.GONE\n                            homeToolbar.setSearch.visibility = View.VISIBLE\n                            buyernav.visibility = View.VISIBLE\n                            sellernav.visibility = View.GONE\n                            AddressLayout.visibility = View.VISIBLE\n                            //loadFragment(fragobj)\n                            mBottomNavigationBuyer.menu.getItem(0).isChecked = true\n                        }\n                        Log.e(\"Map Fragment2 \", resultDestination)\n                    } catch (e: IOException) {\n                        Log.e(\"MapsActivity\", e.localizedMessage)\n                    }\n                } catch (e: Exception) {\n                    Log.e(\"MainActivity\", e.message.toString())\n                }\n            }\n\n        }\n\n        if (requestCode == 1010 && resultCode == Activity.RESULT_OK) {\n            resultCode1 = \"1010\"\n            viewModelDashBoard.getProfile(tokenFirebase)//get profile Api\n        }\n\n        //\n        if (requestCode == 0 && resultCode == Activity.RESULT_OK) {\n            Constant.showToast(\"sucess\", this)\n        }\n    }\n\n    override fun inflatePostFragment() {\n        loadFragment(BuyerPostShoppingListFragment())\n        textToolbarTitle.text = getString(R.string.post_shopping_list)\n        homeToolbar.done.visibility = View.VISIBLE\n        homeToolbar.checkTotalCredits.visibility = View.VISIBLE\n        homeToolbar.setSearch.visibility = View.GONE\n        homeToolbar.whatsAppText.visibility = View.GONE\n        Constant.stopBacgroundTimer = 1\n        Constant.startFirstTime =true\n        homeToolbar.whatsAppTextICons.visibility = View.GONE\n        mBottomNavigationBuyer.menu.getItem(2).isChecked = true\n    }\n\n\n    //****************buyer notification or seller\n    override fun buyerNotificationClick(notificationModel: NotificationModel) {\n        val type = Constant.getPrefs(this).getString(Constant.type, \"\")\n//type 1 buyer type 2=seller\n        if (type == \"1\") {\n            val intent = Intent(this, CommonNotificationConfirmationActivity::class.java)\n            intent.putExtra(\"keySource4\", notificationModel)\n            startActivityForResult(intent, 1001)\n        } else {\n            val intent = Intent(this, RateBuyerActivity::class.java)\n            intent.putExtra(\"keySource7\", notificationModel)\n            startActivityForResult(intent, 1002)\n        }\n\n\n    }\n\n    //****************************notification data set***************//\n    private fun PushNotificationIntegration() {\n        val source_id = intent.getStringExtra(\"source_id\")!!\n        val list_type = intent.getStringExtra(\"list_type\")!!\n        val source = intent.getStringExtra(\"source\")!!\n        val name = intent.getStringExtra(\"name\")!!\n        val image = intent.getStringExtra(\"image\")!!\n        val level = intent.getStringExtra(\"level\")!!\n        val listingname = intent.getStringExtra(\"listingname\")!!\n        val reputation = intent.getStringExtra(\"reputation\")!!\n        val created_at = intent.getStringExtra(\"created_at\")!!\n        val notification_id = intent.getStringExtra(\"notification_id\")!!\n        val sender_id = intent.getStringExtra(\"sender_id\")!!\n\n        //source 1 when the seller quote to the buyer list notification send to buyer \"seller submit the quote\"\n        if (source.equals(\"1\")) {\n            val intent = Intent(this, BuyerShopListApproveRejectActivity::class.java)//complete\n            intent.putExtra(\"source_id\", source_id)\n            intent.putExtra(\"list_type\", list_type)\n            intent.putExtra(\"source\", source)\n            intent.putExtra(\"name\", name)\n            intent.putExtra(\"image\", image)\n            intent.putExtra(\"level\", level)\n            intent.putExtra(\"listingname\", listingname)\n            intent.putExtra(\"reputation\", reputation)\n            intent.putExtra(\"created_at\", created_at)\n            startActivity(intent)\n        }\n        //source-2 when seller approve the buyer quote notification send to buyer \"accept your order request\"\n        else if (source.equals(\"2\")) {\n            val intent = Intent(this, BuyerOrderDetailsActivity::class.java)//complete\n            intent.putExtra(\"source_id\", source_id)\n            intent.putExtra(\"list_type\", list_type)\n            intent.putExtra(\"source\", source)\n            intent.putExtra(\"name\", name)\n            intent.putExtra(\"image\", image)\n            intent.putExtra(\"level\", level)\n            intent.putExtra(\"listingname\", listingname)\n            intent.putExtra(\"reputation\", reputation)\n            intent.putExtra(\"created_at\", created_at)\n            startActivity(intent)\n        }\n        //source 3 when the seller reject the order of buyer quote send to buyer \"reject your order request\"\n        else if (source.equals(\"3\")) {\n            val intent = Intent(this, BuyerOrderDetailsActivity::class.java)//complete\n            intent.putExtra(\"source_id\", source_id)\n            intent.putExtra(\"list_type\", list_type)\n            intent.putExtra(\"source\", source)\n            intent.putExtra(\"name\", name)\n            intent.putExtra(\"image\", image)\n            intent.putExtra(\"level\", level)\n            intent.putExtra(\"listingname\", listingname)\n            intent.putExtra(\"reputation\", reputation)\n            intent.putExtra(\"created_at\", created_at)\n            startActivity(intent)\n        }\n        //source 4 when the seller complete the list notification to Buyer \"seller has complete your order\"\n        else if (source.equals(\"4\")) {\n            val intent = Intent(this, CommonNotificationConfirmationActivity::class.java)//complete\n            intent.putExtra(\"source_id\", source_id)\n            intent.putExtra(\"list_type\", list_type)\n            intent.putExtra(\"source\", source)\n            intent.putExtra(\"name\", name)\n            intent.putExtra(\"image\", image)\n            intent.putExtra(\"level\", level)\n            intent.putExtra(\"listingname\", listingname)\n            intent.putExtra(\"reputation\", reputation)\n            intent.putExtra(\"created_at\", created_at)\n            intent.putExtra(\"notification_id\", notification_id)\n            startActivity(intent)\n        }\n        //source 5 when the buyer accept the request of seller that are quote on buyer list notification send to seller \"buyer has accepted your order\"\n        else if (source.equals(\"5\")) {\n            val intent =\n                Intent(this, ToBeDeliveredOrderListActivity::class.java)//complete\n            intent.putExtra(\"source_id\", source_id)\n            intent.putExtra(\"list_type\", list_type)\n            intent.putExtra(\"source\", source)\n            intent.putExtra(\"name\", name)\n            intent.putExtra(\"image\", image)\n            intent.putExtra(\"level\", level)\n            intent.putExtra(\"listingname\", listingname)\n            intent.putExtra(\"reputation\", reputation)\n            intent.putExtra(\"created_at\", created_at)\n            startActivity(intent)\n        }\n        //source 6 when the buyer reject the request of seller that are quoted on buyer list notification send to  seller \"buyer Reject your order\"\n        else if (source.equals(\"6\")) {\n            val intent = Intent(this, SellerCancelledOrderListActivity::class.java)//complete\n            intent.putExtra(\"source_id\", source_id)\n            intent.putExtra(\"list_type\", list_type)\n            intent.putExtra(\"source\", source)\n            intent.putExtra(\"name\", name)\n            intent.putExtra(\"image\", image)\n            intent.putExtra(\"level\", level)\n            intent.putExtra(\"listingname\", listingname)\n            intent.putExtra(\"reputation\", reputation)\n            intent.putExtra(\"created_at\", created_at)\n            startActivity(intent)\n        }\n        //source 7 when the buyer complete the list of seller notification send to seller \"buyer confirmed your list \"\n        else if (source.equals(\"7\")) {\n            val intent = Intent(this, RateBuyerActivity::class.java)//complete\n            intent.putExtra(\"source_id\", source_id)\n            intent.putExtra(\"list_type\", list_type)\n            intent.putExtra(\"source\", source)\n            intent.putExtra(\"name\", name)\n            intent.putExtra(\"image\", image)\n            intent.putExtra(\"level\", level)\n            intent.putExtra(\"listingname\", listingname)\n            intent.putExtra(\"reputation\", reputation)\n            intent.putExtra(\"created_at\", created_at)\n            intent.putExtra(\"notification_id\", notification_id)\n            intent.putExtra(\"sender_id\", sender_id)\n            startActivity(intent)\n        }\n        // source 8 when the buyer create the dispute  the notification send to the seller \" buyer added a dispute on your list\"\n        else if (source.equals(\"8\")) {\n            val intent = Intent(this, ResolutionActivity::class.java)//complete\n            intent.putExtra(\"source_id\", source_id)\n            intent.putExtra(\"list_type\", list_type)\n            intent.putExtra(\"source\", source)\n            intent.putExtra(\"name\", name)\n            intent.putExtra(\"image\", image)\n            intent.putExtra(\"level\", level)\n            intent.putExtra(\"listingname\", listingname)\n            intent.putExtra(\"reputation\", reputation)\n            intent.putExtra(\"created_at\", created_at)\n            startActivity(intent)\n        }\n        //source 9 when the seller accept the dispute  the notification send to the buyer \"seller has accepte the dispute\"\n        else if (source.equals(\"9\")) {\n            val intent = Intent(this, BuyerOrderDetailsActivity::class.java)//complete\n            intent.putExtra(\"source_id\", source_id)\n            intent.putExtra(\"list_type\", list_type)\n            intent.putExtra(\"source\", source)\n            intent.putExtra(\"name\", name)\n            intent.putExtra(\"image\", image)\n            intent.putExtra(\"level\", level)\n            intent.putExtra(\"listingname\", listingname)\n            intent.putExtra(\"reputation\", reputation)\n            intent.putExtra(\"created_at\", created_at)\n            startActivity(intent)\n        }\n        //source 10 when the seller refute to the dispute of byer  notification send to buyer\"seller has refute on your dispute\"\n        else if (source.equals(\"10\")) {\n            val intent = Intent(this, UnderReviewOrderDetailsActivity::class.java)//complete\n            intent.putExtra(\"source_id\", source_id)\n            intent.putExtra(\"list_type\", list_type)\n            intent.putExtra(\"source\", source)\n            intent.putExtra(\"name\", name)\n            intent.putExtra(\"image\", image)\n            intent.putExtra(\"level\", level)\n            intent.putExtra(\"listingname\", listingname)\n            intent.putExtra(\"reputation\", reputation)\n            intent.putExtra(\"created_at\", created_at)\n            startActivity(intent)\n        }\n        //source 11 when the buyer is shared the shopping to the another buyer than another buyer get the notification\"Share feed \"\n        //no case for this\n        // else if (source.equals(\"11\")) {\n//            val intent = Intent(this, DashBoardBuyerActivity::class.java)\n//            startActivity(intent)\n//            finish()\n//            intent.putExtra(\"source_id\", source_id);\n//            intent.putExtra(\"list_type\", list_type);\n//            intent.putExtra(\"source\", source);\n        // }\n        //source 12 when the buyer submit the quote  the seller list  notification send to the seller \"buyer submit the quote\"\n        else if (source.equals(\"12\")) {\n            val intent = Intent(this, SellerApprovalOrderListActivity::class.java)//complete\n            intent.putExtra(\"source_id\", source_id)\n            intent.putExtra(\"list_type\", list_type)\n            intent.putExtra(\"source\", source)\n            intent.putExtra(\"name\", name)\n            intent.putExtra(\"image\", image)\n            intent.putExtra(\"level\", level)\n            intent.putExtra(\"listingname\", listingname)\n            intent.putExtra(\"reputation\", reputation)\n            intent.putExtra(\"created_at\", created_at)\n            intent.putExtra(\"sender_id\", sender_id)\n            startActivity(intent)\n        }\n        // source 13  is used for when the  seller or buyer are complete their 1200 creedits\n        else if (source.equals(\"13\")) {\n            val intent = Intent(this, CreditConvertActivity::class.java)//complete\n            intent.putExtra(\"source_id\", source_id)\n            intent.putExtra(\"list_type\", list_type)\n            intent.putExtra(\"source\", source)\n            intent.putExtra(\"name\", name)\n            intent.putExtra(\"image\", image)\n            intent.putExtra(\"level\", level)\n            intent.putExtra(\"listingname\", listingname)\n            intent.putExtra(\"reputation\", reputation)\n            intent.putExtra(\"created_at\", created_at)\n            startActivity(intent)\n        }\n        // source 14  is used for message of chat activity\n        else if (source.equals(\"14\")) {\n            val modelChat = ModelChat()\n            modelChat.listingname = listingname!!\n            modelChat.channel_id = source_id.toString()\n            modelChat.user_id = sender_id.toString()\n            modelChat.level = level.toString()\n            modelChat.image = image.toString()\n            modelChat.type = list_type.toString()\n            modelChat.name = name.toString()\n            val intent = Intent(this, ChatMessagesActivity::class.java)\n            intent.putExtra(\"model\", modelChat)\n            startActivity(intent)\n        }\n        // source 14  is used for message of chat activity\n        else if (source.equals(\"15\")) {\n            val modelChat = OrderModel()\n            modelChat.listingname = listingname\n            modelChat.req_id = source_id\n            modelChat.seller_id = sender_id\n            modelChat.seller_level = level\n            modelChat.seller_image = image\n            modelChat.list_type = list_type\n            modelChat.seller_name = name\n            modelChat.reputation = reputation\n            val intent = Intent(this, RateSellerActivity::class.java)\n            intent.putExtra(\"NotificationRateToSeller\", modelChat)\n            startActivity(intent)\n        } else {\n            //for all\n            val intent = Intent(this, CommonNotificationActivity::class.java)\n            startActivity(intent)\n        }\n\n    }\n\n    private fun creditDeductionLogic(): Int {\n        val json = JSONObject(Constant.getPrefs(this).getString(Constant.PROFILE, \"\"))\n        buyerLevel = json.optString(\"buyer_level\").trim()\n        creditPerProduct = json.optString(\"per_product_credits\").trim()\n        buyerCredits = json.optString(\"credits\").trim()\n        when (buyerLevel) {\n            \"1\" -> freeProducts = 5\n            \"2\" -> freeProducts = 6\n            \"3\" -> freeProducts = 8\n            \"4\" -> freeProducts = 10\n            \"5\" -> freeProducts = 15\n        }\n\n        return freeProducts\n\n    }\n\n    //*************************chatting count\n    private fun showChatCount() {\n        if (Constant.getProfileData(this).unreadcount == \"0\" || Constant.getProfileData(this).unreadcount.isEmpty()) {\n            homeToolbar.chat.visibility = View.VISIBLE\n            homeToolbar.toolbarMesageButton.visibility = View.GONE\n        } else {\n            homeToolbar.toolbarMesageButton.visibility = View.VISIBLE\n            homeToolbar.toolbarMesageButton.text = Constant.getProfileData(this).unreadcount\n        }\n\n    }\n\n    //show adress only first time when user\n    fun showAdressOnHomePage() {\n        if (Constant.getProfileData(this).full_address != \"\") {\n//**********************set the address in the toolbar text\n            if (optionalDeliveryZoneModel.address.isNotEmpty()) {\n                toolbarAdressHome.visibility = View.VISIBLE\n                toolbarAdressHome.setText(optionalDeliveryZoneModel.address)\n\n            } else if (Constant.getProfileData(this).full_address.isNotEmpty()) {\n                toolbarAdressHome.text = Constant.getProfileData(this).full_address\n                toolbarAdressHome.visibility = View.VISIBLE\n            }\n        }\n    }\n\n    //****************clear the address\n    fun ClearAddressData() {\n        optionalDeliveryZoneModel.address = \"\"\n        optionalDeliveryZoneModel.lat = \"\"\n        optionalDeliveryZoneModel.long = \"\"\n    }\n\n    //*****************************address update first time\n    private fun getLastLocation() {\n        //check the permission is aloow or not\n        //if allow then go to the if condition\n        if (checkPermissions()) {\n            //check location enabled in settings\n            if (isLocationEnabled()) {\n                fusedLocationClient =\n                    LocationServices.getFusedLocationProviderClient(this)\n                if (ActivityCompat.checkSelfPermission(\n                        this,\n                        Manifest.permission.ACCESS_FINE_LOCATION\n                    ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(\n                        this,\n                        Manifest.permission.ACCESS_COARSE_LOCATION\n                    ) != PackageManager.PERMISSION_GRANTED\n                ) {\n                    return\n                }\n                fusedLocationClient.lastLocation.addOnCompleteListener(this) { task ->\n                    val location: Location? = task.result\n                    if (location == null) {\n                        requestNewLocationData()\n                    } else {\n                        optionalDeliveryZoneModel.lat = location.latitude.toString()\n                        optionalDeliveryZoneModel.long = location.longitude.toString()\n                        optionalDeliveryZoneModel.address =\n                            getAddressConvertLatLong(\n                                location.latitude,\n                                location.longitude\n                            )//convert the address\n\n                        addAddressCustomDialog(optionalDeliveryZoneModel)//show the dialog\n                    }\n                }\n            } else {\n//show to alert location enabled redirect the user to setting screen\n                showAlertLocationEnabled()\n            }\n        } else {\n            activateLocationLayout.visibility =\n                View.VISIBLE//if location is not allow then visible screen\n        }\n    }\n\n    private fun getAddressConvertLatLong(latitude: Double, longitude: Double): String {\n        try {\n            val geocoder = Geocoder(this)\n            val address: Address?\n            val addresses =\n                geocoder.getFromLocation(\n                    latitude,\n                    longitude,\n                    1\n                )\n            address = addresses[0]\n            val builder = StringBuilder()\n            builder.append(address?.getAddressLine(0)).append(\",\\t\")\n            val resultDestination = builder.toString()\n            return resultDestination\n        } catch (e: java.lang.Exception) {\n            e.printStackTrace()\n        }\n        return \"\"\n    }\n\n    //****************these all are permission\n    private fun isLocationEnabled(): Boolean {\n        val locationManager: LocationManager =\n            getSystemService(Context.LOCATION_SERVICE) as LocationManager\n        return locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER) || locationManager.isProviderEnabled(\n            LocationManager.NETWORK_PROVIDER\n        )\n    }\n\n    private fun checkPermissions(): Boolean {\n        if (ActivityCompat.checkSelfPermission(\n                this,\n                Manifest.permission.ACCESS_COARSE_LOCATION\n            ) == PackageManager.PERMISSION_GRANTED &&\n            ActivityCompat.checkSelfPermission(\n                this,\n                Manifest.permission.ACCESS_FINE_LOCATION\n            ) == PackageManager.PERMISSION_GRANTED\n        ) {\n            return true\n        }\n        return false\n    }\n\n    private fun requestPermissions() {\n        ActivityCompat.requestPermissions(\n            this,\n            arrayOf(\n                Manifest.permission.ACCESS_COARSE_LOCATION,\n                Manifest.permission.ACCESS_FINE_LOCATION\n            ),\n            PERMISSION_ID\n        )\n    }\n\n    private fun requestNewLocationData() {\n        val mLocationRequest = LocationRequest()\n        mLocationRequest.priority = LocationRequest.PRIORITY_HIGH_ACCURACY\n        mLocationRequest.interval = 0\n        mLocationRequest.fastestInterval = 0\n        mLocationRequest.numUpdates = 1\n\n        fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)\n        if (ActivityCompat.checkSelfPermission(\n                this,\n                Manifest.permission.ACCESS_FINE_LOCATION\n            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(\n                this,\n                Manifest.permission.ACCESS_COARSE_LOCATION\n            ) != PackageManager.PERMISSION_GRANTED\n        ) {\n            // TODO: Consider calling\n            //    ActivityCompat#requestPermissions\n            // here to request the missing permissions, and then overriding\n            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,\n            //                                          int[] grantResults)\n            // to handle the case where the user grants the permission. See the documentation\n            // for ActivityCompat#requestPermissions for more details \\\n\n            return\n        }\n        fusedLocationClient.requestLocationUpdates(\n            mLocationRequest, mLocationCallback,\n            Looper.myLooper()\n        )\n    }\n\n    private val mLocationCallback = object : LocationCallback() {\n        override fun onLocationResult(locationResult: LocationResult) {\n            // val mLastLocation: Location = locationResult.lastLocation\n//            findViewById<TextView>(R.id.latTextView).text = mLastLocation.latitude.toString()\n//            findViewById<TextView>(R.id.lonTextView).text = mLastLocation.longitude.toString()\n        }\n\n    }\n\n    fun checkLocationEnabledOrNot() {\n        if (ActivityCompat.checkSelfPermission(\n                this,\n                Manifest.permission.ACCESS_FINE_LOCATION\n            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(\n                this, Manifest.permission.ACCESS_COARSE_LOCATION\n            ) != PackageManager.PERMISSION_GRANTED\n        ) {\n            val mDialog = android.app.AlertDialog.Builder(this)\n            mDialog.setTitle(getString(R.string.alert))\n            mDialog.setCancelable(false)\n\n            mDialog.setMessage(getString(R.string.LOcationPermissionCustomPopText))\n            mDialog.setPositiveButton(\n                getString(R.string.ok)\n            ) { dialog, which ->\n                requestPermissions()\n                Handler().postDelayed({}, 1000)\n                dialog.cancel()\n            }\n            mDialog.show()\n\n        }\n    }\n\n    //**************first time dialog video tour of app***************//\n//    private fun firstTimeCaiguruDialog() {\n//        dialog = Dialog(this)\n//        dialog.window.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\n//        dialog.setContentView(R.layout.first_time_dialog)\n//        dialog.show()\n//\n//        //set the click on  button\n//        dialog.btnWatchVideo.setOnClickListener {\n//            val browserIntent =\n//                Intent(Intent.ACTION_VIEW, Uri.parse(getString(R.string.youtubeLInk)))\n//            startActivity(browserIntent)\n//            //set the data in shared pref\n//            Constant.getPrefs(this).edit()\n//                .putString(\n//                    Constant.is_seller_first_time,\n//                    Constant.getProfileData(this).is_seller_first_time\n//                )\n//                .apply()\n//            dialog.dismiss()\n//        }\n//        dialog.setOnDismissListener {\n//            //set the data in shared pref\n//            Constant.getPrefs(this).edit()\n//                .putString(\n//                    Constant.is_seller_first_time,\n//                    Constant.getProfileData(this).is_seller_first_time\n//                )\n//                .apply()\n//            dialog.dismiss()\n//        }\n//\n//    }\n\n    fun buyerPurchaseListAlertDialog() {\n        val mDialog = android.app.AlertDialog.Builder(this)\n        mDialog.setTitle(getString(R.string.alert))\n        mDialog.setCancelable(false)\n        mDialog.setMessage(getString(R.string.buyer_post_shopping_alert))\n        mDialog.setPositiveButton(\n            getString(R.string.ok)\n        ) { dialog, which ->\n            dialog.cancel()\n        }\n\n        mDialog.show()\n    }\n\n    //set the click on the actvate lovation\n    fun activateLocationClick() {\n        activateLocationLayout.btnActivateLocation.setOnClickListener {\n            checkLocationEnabledOrNot()\n        }\n    }\n\n    override fun onRequestPermissionsResult(\n        requestCode: Int,\n        permissions: Array<String>, grantResults: IntArray\n    ) {\n        when (requestCode) {\n            PERMISSION_ID -> {\n                // If request is cancelled, the result arrays are empty.\n                if ((grantResults.isNotEmpty() &&\n                            grantResults[0] == PackageManager.PERMISSION_GRANTED)\n                ) {\n                    // Permission is granted. Continue the action or workflow\n                    // in your app.\n                    //  Toast.makeText(this, \"locattion Accepted\", Toast.LENGTH_SHORT).show()\n                    if (showDialog == 0) {\n                        fusedLocationClient =\n                            LocationServices.getFusedLocationProviderClient(this)\n\n                        val gson = Gson()\n                        val json = Constant.getPrefs(this).getString(\"profile\", \"1\")\n                        val typeCheck = Constant.getPrefs(this).getString(Constant.type, \"\")\n                        if (json == \"1\" && typeCheck == \"1\") {\n\n                            if (ActivityCompat.checkSelfPermission(\n                                    this,\n                                    Manifest.permission.ACCESS_FINE_LOCATION\n                                ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(\n                                    this,\n                                    Manifest.permission.ACCESS_COARSE_LOCATION\n                                ) != PackageManager.PERMISSION_GRANTED\n                            ) {\n\n                                return\n                            }\n\n\n                            fusedLocationClient.lastLocation.addOnCompleteListener(this) { task ->\n                                val location: Location? = task.result\n                                if (location == null) {\n                                    requestNewLocationData()\n                                } else {\n                                    optionalDeliveryZoneModel.lat = location.latitude.toString()\n                                    optionalDeliveryZoneModel.long = location.longitude.toString()\n                                    optionalDeliveryZoneModel.address =\n                                        getAddressConvertLatLong(\n                                            location.latitude,\n                                            location.longitude\n                                        )\n\n                                    addAddressCustomDialog(optionalDeliveryZoneModel)//show the dialog\n                                }\n                            }\n                            addAddressCustomDialog(optionalDeliveryZoneModel)\n\n                        } else {\n                            if (json != \"1\") {\n                                val profileModel = gson.fromJson(json, GetProfileModel::class.java)\n                                if (profileModel.lat.isEmpty() && profileModel.long.isEmpty()) {\n                                    if (ActivityCompat.checkSelfPermission(\n                                            this,\n                                            Manifest.permission.ACCESS_FINE_LOCATION\n                                        ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(\n                                            this,\n                                            Manifest.permission.ACCESS_COARSE_LOCATION\n                                        ) != PackageManager.PERMISSION_GRANTED\n                                    ) {\n\n                                        return\n                                    }\n                                    fusedLocationClient.lastLocation.addOnCompleteListener(this) { task ->\n                                        val location: Location? = task.result\n                                        if (location == null) {\n                                            requestNewLocationData()\n                                        } else {\n                                            optionalDeliveryZoneModel.lat =\n                                                location.latitude.toString()\n                                            optionalDeliveryZoneModel.long =\n                                                location.longitude.toString()\n                                            optionalDeliveryZoneModel.address =\n                                                getAddressConvertLatLong(\n                                                    location.latitude,\n                                                    location.longitude\n                                                )\n\n                                            addAddressCustomDialog(optionalDeliveryZoneModel)//show the dialog\n                                        }\n                                    }\n                                    addAddressCustomDialog(optionalDeliveryZoneModel)\n                                }\n                            }\n                        }\n                    }\n                    activateLocationLayout.visibility = View.GONE\n                } else {\n                    showAlertLocationEnabled()\n                }\n                return\n            }\n\n            // Add other 'when' lines to check for other\n            // permissions this app might request.\n            else -> {\n                // Ignore all other requests.\n            }\n        }\n    }\n\n    //*********************filling or edit the address from the dashboard *****************//\n    private fun addAddressHomeCustomDialog() {\n        // *********************************** Add Address by custom dialog ******************************************//\n        addressDialog.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))\n        addressDialog.setContentView(R.layout.buyer_add_address_dialog)\n        addressDialog.setCancelable(true)\n        addressDialog.show()\n        addressDialog.textfeed.visibility = View.VISIBLE\n        addressDialog.addressHome.visibility = View.VISIBLE//edttext field visible\n        addressDialog.address.visibility = View.INVISIBLE//textfield\n        addressDialog.EdtMapLocation.visibility = View.VISIBLE\n        addressDialog.addressHome.filters = arrayOf<InputFilter>(HideEmoji(this))\n        //set address prefill\n        if (this.optionalDeliveryZoneModel.lat.isEmpty()) {\n            if (Constant.getProfileData(this).lat != \"\") {\n                this.optionalDeliveryZoneModel.lat = Constant.getProfileData(this).lat\n                this.optionalDeliveryZoneModel.long = Constant.getProfileData(this).long\n                this.optionalDeliveryZoneModel.address =\n                    Constant.getProfileData(this).full_address\n                addressDialog.addressHome.setText(Constant.getProfileData(this).full_address)\n            }\n        } else {\n            addressDialog.addressHome.setText(optionalDeliveryZoneModel.address)\n        }\n        //set the click button of custom dialog\n        addressDialog.viewmap.setOnClickListener {\n            Constant.UpdateAddressInBackGround = \"1\"\n            optionalDeliveryZoneModel.address = addressDialog.addressHome.text.toString()\n                .trim()//set the address if they change anything\n            val intent = Intent(this, BuyerAddressMapBoxActivity::class.java)\n            intent.putExtra(\"keyOptionalDeliveryZone1\", this.optionalDeliveryZoneModel)\n            intent.putExtra(\"Select\", \"Select address\")\n            startActivityForResult(intent, 112)\n        }\n        //************set the click on the edit\n        addressDialog.EdtMapLocation.setOnClickListener {\n            Constant.UpdateAddressInBackGround = \"1\"\n            optionalDeliveryZoneModel.address = addressDialog.addressHome.text.toString()\n                .trim()//set the address if they change anything\n            val intent = Intent(this, BuyerAddressMapBoxActivity::class.java)\n            intent.putExtra(\"keyOptionalDeliveryZone1\", this.optionalDeliveryZoneModel)\n            intent.putExtra(\"Select\", \"Select address\")\n            startActivityForResult(intent, 112)\n        }\n\n\n        addressDialog.updateButton.setOnClickListener {\n            if (addressDialog.addressHome.text.isEmpty()) {\n                Constant.showToast(getString(R.string.Please_Enter_your_Address), this)\n            } else if (this.optionalDeliveryZoneModel.lat.isEmpty()) {\n                Constant.showToast(getString(R.string.Reselect_address), this)\n            } else {\n                optionalDeliveryZoneModel.address = addressDialog.addressHome.text.toString()\n                toolbarAdressHome.visibility = View.VISIBLE\n                toolbarAdressHome.setText(optionalDeliveryZoneModel.address)\n                val bundle = Bundle()\n                bundle.putString(\"edttext\", \"From Activity\")\n                bundle.putParcelable(\"edttext\", this.optionalDeliveryZoneModel)\n                val fragobj = HomeBuyerFragment()\n                fragobj.setArguments(bundle)\n                loadFragment(fragobj)\n                addressDialog.dismiss()\n            }\n\n        }\n        addressDialog.cancel.setOnClickListener {\n            addressDialog.dismiss()\n        }\n    }\n\n\n    fun showWhatsappIconBlinking() {\n        // blinkTextView()\n\n        getMessagesConinous()\n    }\n\n\n    //set chat icon click\n    fun setwhatsAppIConClick() {\n        homeToolbar.whatsAppText.setOnClickListener {\n            openWhatsApp()\n        }\n        homeToolbar.whatsAppTextICons.setOnClickListener {\n            openWhatsApp()\n        }\n    }\n\n    //*************check package install or not\n    private fun whatsappInstalledOrNot(uri: String): Boolean {\n        val pm = packageManager\n        var app_installed = false\n        app_installed = try {\n            pm.getPackageInfo(uri, PackageManager.GET_ACTIVITIES)\n            true\n        } catch (e: PackageManager.NameNotFoundException) {\n            false\n        }\n        return app_installed\n    }\n\n    //****************open whatsapp with message************//\n    fun openWhatsappWIthMessage() {\n        ///  var smsNumber = \"+91 89688 81388\" // contains spaces.\n        var smsNumber = \"+44 7831 805229\" // contains spaces.\n        smsNumber = smsNumber.replace(\"+\", \"\").replace(\" \", \"\")\n        val packageManager: PackageManager = this.getPackageManager()\n        val i = Intent(Intent.ACTION_VIEW)\n\n        try {\n            val url =\n                \"https://api.whatsapp.com/send?phone=\" + smsNumber + \"&text=\" + URLEncoder.encode(\n                    \"\",\n                    \"UTF-8\"\n                )\n            i.setPackage(\"com.whatsapp\")\n            i.data = Uri.parse(url)\n            if (i.resolveActivity(packageManager) != null) {\n                this.startActivity(i)\n            }\n        } catch (e: java.lang.Exception) {\n            e.printStackTrace()\n        }\n    }\n\n    //*************both code mixture\n    private fun openWhatsApp() {\n        val isWhatsappInstalled = whatsappInstalledOrNot(\"com.whatsapp\")\n        if (isWhatsappInstalled) {\n            openWhatsappWIthMessage()\n        } else {\n            val uri: Uri = Uri.parse(\"market://details?id=com.whatsapp\")\n            val goToMarket = Intent(Intent.ACTION_VIEW, uri)\n            Toast.makeText(\n                this, getString(R.string.app_not_installed),\n                Toast.LENGTH_SHORT\n            ).show()\n            startActivity(goToMarket)\n        }\n\n\n    }\n\n    fun getMessagesConinous() {\n        // try {\n        runOnUiThread {\n            // Stuff that updates the UI\n            val t = Timer()\n            //Set the schedule function and rate\n            t.scheduleAtFixedRate(\n                object : TimerTask() {\n                    override fun run() {\n                        if (Constant.stopBacgroundTimer == 0) {\n                            val asyncTask = AsyncTaskRunner(this@DashBoardBuyerActivity)\n                            asyncTask.execute()\n                        } else {\n                            t.cancel()\n                        }\n                    }\n                },\n                //Set how long before to start calling the TimerTask (in milliseconds)\n                0,\n                //Set the amount of time between each execution (in milliseconds)\n                1000\n            )\n        }\n    }\n\n    private class AsyncTaskRunner(var context: DashBoardBuyerActivity) :\n        AsyncTask<String?, String?, String?>() {\n        private var resp: String? = \"1\"\n\n        override fun doInBackground(vararg p0: String?): String? {\n            if (resp == \"1\") {\n                resp = \"0\"\n            } else {\n                resp = \"1\"\n            }\n            return resp\n        }\n\n\n        override fun onPostExecute(result: String?) {\n            if (context.homeToolbar.whatsAppTextICons.getVisibility() == View.VISIBLE) {\n                context.homeToolbar.whatsAppTextICons.setVisibility(View.INVISIBLE)\n            } else {\n                context.homeToolbar.whatsAppTextICons.setVisibility(View.VISIBLE)\n            }\n        }\n\n\n        override fun onPreExecute() {\n\n        }\n\n        override fun onProgressUpdate(vararg text: String?) {\n\n        }\n\n\n    }\n\n\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/caiguru/commonScreens/dashBoardParentActivity/DashBoardBuyerActivity.kt	(revision ddfacff8e54db732eb6b32ab1cad9fb3d43b92b7)
+++ app/src/main/java/com/example/caiguru/commonScreens/dashBoardParentActivity/DashBoardBuyerActivity.kt	(date 1602652790000)
@@ -162,8 +162,7 @@
         PleasWait = findViewById(R.id.PleasWait)
         done.setOnClickListener {
             if (fragmentCurrent is BuyerPostShoppingListFragment) {   // is BuyerPostShoppingFragment is a instance of fragment ???..
-                val model: PostBuyerShopListModel =
-                    (fragmentCurrent as BuyerPostShoppingListFragment).buyer()  // casting  of BuyerPostShoppingFragment
+                val model: PostBuyerShopListModel = (fragmentCurrent as BuyerPostShoppingListFragment).buyer()  // casting  of BuyerPostShoppingFragment
 
                 if (model.listingname.isEmpty()) {
 //                    Toast.makeText(
Index: app/src/main/java/com/example/caiguru/commonScreens/loginScreen/LoginRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.caiguru.commonScreens.loginScreen\n\nimport android.app.Application\nimport android.os.Parcel\nimport android.os.Parcelable\nimport android.util.Log\nimport android.widget.Toast\nimport androidx.lifecycle.LiveData\nimport androidx.lifecycle.MutableLiveData\nimport com.example.caiguru.R\nimport constant_Webservices.Constant\nimport constant_Webservices.WebServices\nimport okhttp3.ResponseBody\nimport org.json.JSONObject\nimport retrofit2.Call\nimport retrofit2.Callback\nimport retrofit2.Response\n\nclass LoginRepository(var application: Application) {\n\n    var mData = MutableLiveData<String>()\n    var facebookData = MutableLiveData<ModelFacebook>()\n    var mError = MutableLiveData<ErrorModel>()\n\n    fun setLoginData(email: String, password: String) {\n        val retrofit =Constant.getRestClient()\n        val services = retrofit.create(WebServices::class.java)\n        val call: Call<ResponseBody> = services.login(email,password)\n        call.enqueue(object : Callback<ResponseBody> {\n            override fun onResponse(call: Call<ResponseBody>, response: Response<ResponseBody>) {\n                if (response.isSuccessful) {\n                    try {\n                        val res = response.body()!!.string()\n                        val json = JSONObject(res)\n                        val status = json.optString(\"status\")\n                        if (status == \"true\") {\n                            val token = json.optString(\"token\")\n                            val type = json.optString(\"type\")\n                            val switch_active = json.optString(\"switch_active\")\n\n\n                            //save the login Data in shared prefrence\n                            val editor = Constant.getPrefs(application).edit()\n                            editor.putString(Constant.token, token.toString())\n                            editor.putString(Constant.type, type.toString())\n                            editor.putString(Constant.switch_active, switch_active.toString())\n                            editor.apply()\n\n                            mData.value= status\n                        }else {\n                            val model = ErrorModel()\n                            model.message = json.optString(\"message_${Constant.getLocal(application)}\")\n                            mError.value = model\n                        }\n                    } catch (e: Exception) {\n\n                    }\n                }else{\n                    var error = response.errorBody().toString()\n                    Toast.makeText(application, error, Toast.LENGTH_SHORT).show()\n                }\n            }\n\n            override fun onFailure(call: Call<ResponseBody>, t: Throwable) {\n\n                val model = ErrorModel()\n                model.message = application.getString(R.string.network_error)\n                mError.value = model\n            }\n\n        })\n    }\n    //status observer\n    fun getdata(): MutableLiveData<String> {\n        return mData\n    }\n\n    //error observer\n    fun errorget(): MutableLiveData<ErrorModel> {\n        return mError\n    }\n\n    fun loginUsingFacebook(\n        socialId: String?,\n        url: String,\n        userName: String,\n        userEmail: String\n    ) {\n\n        val retrofit = Constant.getRestClient()\n\n        val services = retrofit.create(WebServices::class.java)\n        val call: Call<ResponseBody> = services.socialLogin(socialId,\"2\")\n        call.enqueue(object : Callback<ResponseBody> {\n            override fun onResponse(call: Call<ResponseBody>, response: Response<ResponseBody>) {\n                if (response.isSuccessful) {\n                    try {\n                        val res = response.body()!!.string()\n                        val json = JSONObject(res)\n                        val status = json.optString(\"status\")\n                        if (status == \"true\") {\n                            if (json.optString(\"register\") == \"1\") {\n                                val model = ModelFacebook()\n                                model.id = socialId!!\n                                model.email = userEmail\n                                model.name = userName\n                                model.picture = url\n                                facebookData.value = model\n                            }else{\n                                val token = json.optString(\"token\")\n                                val type = json.optString(\"type\")\n                                val switch_active = json.optString(\"switch_active\")\n                                //save the login Data in shared prefrence\n                                val editor = Constant.getPrefs(application).edit()\n                                editor.putString(Constant.token, token.toString())\n                                editor.putString(Constant.type, type.toString())\n                                editor.putString(Constant.switch_active, switch_active.toString())\n                                editor.apply()\n                                mData.value= status\n                            }\n                        }else{\n                           Log.e(\"LOCALE: \", \"\"+Constant.getLocal(application))\n                            val model = ErrorModel()\n                            model.message = json.optString(\"message_${Constant.getLocal(application)}\")\n                            mError.value = model\n                        }\n                    } catch (e: Exception) {\n\n                    }\n                }else{\n                    Toast.makeText(application, application.getString(R.string.network_error), Toast.LENGTH_SHORT).show()\n                }\n            }\n\n            override fun onFailure(call: Call<ResponseBody>, t: Throwable) {\n\n                val model = ErrorModel()\n                model.message = application.getString(R.string.network_error)\n                mError.value = model\n            }\n\n        })\n    }\n\n    fun observeFacebook(): LiveData<ModelFacebook> {\n        return facebookData\n    }\n\n\n}\n\nclass ModelFacebook() : Parcelable{\n    var id = \"\"\n    var name = \"\"\n    var email = \"\"\n    var picture = \"\"\n\n    constructor(parcel: Parcel) : this() {\n        id = parcel.readString().toString()\n        name = parcel.readString().toString()\n        email = parcel.readString().toString()\n        picture = parcel.readString().toString()\n    }\n\n    override fun writeToParcel(parcel: Parcel, flags: Int) {\n        parcel.writeString(id)\n        parcel.writeString(name)\n        parcel.writeString(email)\n        parcel.writeString(picture)\n    }\n\n    override fun describeContents(): Int {\n        return 0\n    }\n\n    companion object CREATOR : Parcelable.Creator<ModelFacebook> {\n        override fun createFromParcel(parcel: Parcel): ModelFacebook {\n            return ModelFacebook(parcel)\n        }\n\n        override fun newArray(size: Int): Array<ModelFacebook?> {\n            return arrayOfNulls(size)\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/caiguru/commonScreens/loginScreen/LoginRepository.kt	(revision ddfacff8e54db732eb6b32ab1cad9fb3d43b92b7)
+++ app/src/main/java/com/example/caiguru/commonScreens/loginScreen/LoginRepository.kt	(date 1602652790000)
@@ -45,8 +45,8 @@
                             editor.putString(Constant.type, type.toString())
                             editor.putString(Constant.switch_active, switch_active.toString())
                             editor.apply()
-
                             mData.value= status
+
                         }else {
                             val model = ErrorModel()
                             model.message = json.optString("message_${Constant.getLocal(application)}")
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\n  </component>\n  <component name=\"ProjectType\">\n    <option name=\"id\" value=\"Android\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision ddfacff8e54db732eb6b32ab1cad9fb3d43b92b7)
+++ .idea/misc.xml	(date 1602652790000)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(date 1602652790000)
+++ .idea/compiler.xml	(date 1602652790000)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <bytecodeTargetLevel target="1.8" />
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/res/layout/get_city_adapter.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:orientation=\"horizontal\">\n\n\n    <TextView\n            android:id=\"@+id/butn\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginStart=\"8dp\"\n            android:layout_marginTop=\"8dp\"\n            android:layout_marginEnd=\"8dp\"\n            android:clickable=\"false\"\n            android:layout_marginBottom=\"8dp\"\n            android:background=\"@drawable/rectangle_city_selected_button\"\n            android:fontFamily=\"@font/montserrat_medium\"\n            android:paddingTop=\"8dp\"\n            android:paddingBottom=\"8dp\"\n            android:paddingLeft=\"24dp\"\n            android:paddingRight=\"24dp\"\n            android:text=\"Button\"\n            android:textAllCaps=\"false\"\n            android:textColor=\"@color/light_grey\" />\n\n    <androidx.cardview.widget.CardView\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_alignRight=\"@+id/butn\"\n            android:layout_alignParentTop=\"true\"\n            android:background=\"@null\"\n            app:cardCornerRadius=\"10dp\">\n\n        <ImageView\n                android:id=\"@+id/floatbutton\"\n                android:layout_width=\"24dp\"\n                android:layout_height=\"24dp\"\n                android:layout_alignRight=\"@+id/butn\"\n                android:layout_alignParentTop=\"true\"\n                android:background=\"@drawable/circle_background_white\"\n                android:scaleType=\"fitXY\"\n                android:src=\"@drawable/ic_cross_icon\" />\n\n\n    </androidx.cardview.widget.CardView>\n\n</RelativeLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/layout/get_city_adapter.xml	(revision ddfacff8e54db732eb6b32ab1cad9fb3d43b92b7)
+++ app/src/main/res/layout/get_city_adapter.xml	(date 1602652790000)
@@ -5,7 +5,6 @@
         android:layout_height="wrap_content"
         android:orientation="horizontal">
 
-
     <TextView
             android:id="@+id/butn"
             android:layout_width="wrap_content"
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\n  <component name=\"GradleSettings\">\n    <option name=\"linkedExternalProjectsSettings\">\n      <GradleProjectSettings>\n        <option name=\"delegatedBuild\" value=\"false\" />\n        <option name=\"testRunner\" value=\"PLATFORM\" />\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\n        <option name=\"modules\">\n          <set>\n            <option value=\"$PROJECT_DIR$\" />\n            <option value=\"$PROJECT_DIR$/app\" />\n          </set>\n        </option>\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\n      </GradleProjectSettings>\n    </option>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision ddfacff8e54db732eb6b32ab1cad9fb3d43b92b7)
+++ .idea/gradle.xml	(date 1602652790000)
@@ -15,6 +15,7 @@
           </set>
         </option>
         <option name="resolveModulePerSourceSet" value="false" />
+        <option name="useQualifiedModuleNames" value="true" />
       </GradleProjectSettings>
     </option>
   </component>
Index: app/src/main/java/com/example/caiguru/seller/shoppingListSellers/sellerPostShoppingList/PostShoppingAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.caiguru.seller.shoppingListSellers.sellerPostShoppingList\n\nimport android.annotation.SuppressLint\nimport android.content.Context\nimport android.graphics.Color\nimport android.view.LayoutInflater\nimport android.view.View\nimport android.view.ViewGroup\nimport androidx.recyclerview.widget.RecyclerView\nimport com.bumptech.glide.Glide\nimport com.bumptech.glide.request.RequestOptions\nimport com.example.caiguru.R\nimport com.example.caiguru.seller.homeSeller.GetProfileModel\nimport com.google.gson.Gson\nimport constant_Webservices.Constant\nimport kotlinx.android.synthetic.main.seller_post_shopping_adapter.view.*\nimport java.util.*\nimport kotlin.collections.ArrayList\n\n\nclass PostShoppingAdapter(\n    var context: Context\n\n\n) : RecyclerView.Adapter<PostShoppingAdapter.Viewholder>() {\n    private var profileData = GetProfileModel()\n    private var comissionPer: Int = 0\n    var list: ArrayList<PostShoppingModel> = ArrayList()\n    var click = context as editDataInterface//click\n\n//    inner class MyViewHolder(var rowView: View) : RecyclerView.ViewHolder(\n//        rowView\n//    ) {\n////\n//    }\n\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): Viewholder {\n\n        val view =\n            LayoutInflater.from(context)\n                .inflate(R.layout.seller_post_shopping_adapter, parent, false)\n        return Viewholder(view)\n\n    }\n\n    override fun getItemCount(): Int {\n\n        return list.size\n    }\n\n    @SuppressLint(\"SetTextI18n\")\n    override fun onBindViewHolder(holder: Viewholder, position: Int) {\n        val data = list[position]\n\n        if (position == 0) {\n            holder.itemView.btnChnageOrder.visibility = View.VISIBLE\n        } else {\n            holder.itemView.btnChnageOrder.visibility = View.GONE\n        }\n\n        holder.itemView.btnChnageOrder.setOnClickListener {\n            click.dragDropListClick(list)\n        }\n        val gson = Gson()\n        val json = Constant.getPrefs(context).getString(Constant.PROFILE, \"\")\n        profileData = gson.fromJson(json, GetProfileModel::class.java)\n        data.setProductPosition = position + 1\n        holder.itemView.productid.text =\n            \"#${context.getString(R.string.product)} ${data.setProductPosition}\"\n        //  holder.itemView.txtproductname.text = data.name\n        holder.itemView.quantity.text =\n            data.name + \"(\" + Constant.convertUnits(context, data.unit) + \")\"\n\n        if (data.price != \"\") {\n            val allComission = profileData.plateform_commission.toDouble() + comissionPer.toDouble()\n            holder.itemView.txtprice.text =\n                context.getString(R.string.Price) + \":\" + \" \" + \"$\" + (Constant.roundValue(data.price.toDouble()))\n            val PriceComission = data.price.toDouble() / 100 * allComission\n            val allTotal = data.price.toDouble() + PriceComission\n            data.priceWithComission = Constant.roundValue(allTotal)\n            holder.itemView.txtPriceWithComission.text =\n                context.getString(R.string.Price_with_comission_Without_star) + \":\" + \" \" + \"$\" + data.priceWithComission\n        }\n        holder.itemView.imgEdtfieldMarker.visibility = View.VISIBLE\n        holder.itemView.imgdeleteData.visibility = View.VISIBLE\n        Glide\n            .with(context)\n            .load(data.image)\n            .apply(RequestOptions().override(150, 150).centerCrop())\n            .into(holder.itemView.addimg)\n\n        //set the click on the delete items\n        holder.itemView.imgdeleteData.setOnClickListener {\n            click.deleteShoppingList(list, position)\n\n        }\n\n        holder.itemView.imgEdtfieldMarker.setOnClickListener {\n            click.edtData(data, position)\n        }\n    }\n\n    fun getAllShoppingArrayData(): ArrayList<PostShoppingModel> {\n        return list\n    }\n\n//    override fun onRowMoved(fromPosition: Int, toPosition: Int) {\n//        var myLocalPOsition = 0\n//        if (fromPosition < toPosition) {\n//            for (i in fromPosition until toPosition) {\n//                Collections.swap(list, i, i + 1)\n//            }\n//        } else {\n//            for (i in fromPosition downTo toPosition + 1) {\n//                Collections.swap(list, i, i - 1)\n//            }\n//        }\n//        for (item in list) {\n//            item.setProductPosition = 0\n//            myLocalPOsition += 1\n//            item.setProductPosition = myLocalPOsition\n//\n//        }\n//        notifyItemMoved(fromPosition, toPosition)\n//    }\n\n//    override fun onRowSelected(myViewHolder: PostShoppingAdapter.MyViewHolder) {\n//        myViewHolder.rowView.setBackgroundColor(Color.GRAY)\n//    }\n//\n//    override fun onRowClear(myViewHolder: PostShoppingAdapter.MyViewHolder) {\n//        myViewHolder.rowView.setBackgroundColor(Color.WHITE)\n//    }\n\n\n    fun update(\n        data: ArrayList<PostShoppingModel>,\n        progress: Int\n    ) {\n        comissionPer = progress\n        list = data\n        notifyDataSetChanged()\n\n    }\n\n    class Viewholder(itemView: View) :\n        RecyclerView.ViewHolder(itemView)\n\n    interface editDataInterface {\n\n        fun edtData(\n            data: PostShoppingModel,\n            position: Int\n        )\n\n        fun deleteShoppingList(\n            list: ArrayList<PostShoppingModel>,\n            position: Int\n        )\n\n        fun dragDropListClick(list: ArrayList<PostShoppingModel>)\n    }\n\n    fun getAllDataArraySize(): Int {\n        return list.size\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/caiguru/seller/shoppingListSellers/sellerPostShoppingList/PostShoppingAdapter.kt	(revision ddfacff8e54db732eb6b32ab1cad9fb3d43b92b7)
+++ app/src/main/java/com/example/caiguru/seller/shoppingListSellers/sellerPostShoppingList/PostShoppingAdapter.kt	(date 1602652790000)
@@ -83,11 +83,7 @@
         }
         holder.itemView.imgEdtfieldMarker.visibility = View.VISIBLE
         holder.itemView.imgdeleteData.visibility = View.VISIBLE
-        Glide
-            .with(context)
-            .load(data.image)
-            .apply(RequestOptions().override(150, 150).centerCrop())
-            .into(holder.itemView.addimg)
+        Glide.with(context).load(data.image).apply(RequestOptions().override(150, 150).centerCrop()).into(holder.itemView.addimg)
 
         //set the click on the delete items
         holder.itemView.imgdeleteData.setOnClickListener {
Index: app/src/main/java/com/example/caiguru/commonScreens/selectCities/SelectCitiesActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.caiguru.commonScreens.selectCities\n\nimport android.app.Activity\nimport android.content.Intent\nimport android.os.Bundle\nimport android.text.Editable\nimport android.text.TextWatcher\nimport android.view.MenuItem\nimport android.view.View\nimport android.view.WindowManager\nimport android.widget.TextView\nimport android.widget.Toast\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.appcompat.widget.Toolbar\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.ViewModelProvider\nimport androidx.lifecycle.ViewModelProviders\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport com.example.caiguru.R\nimport com.example.caiguru.buyer.buyerProfile.buyerOrderDetalis.OrderDetailsViewModel\nimport com.example.caiguru.seller.shoppingListSellers.closeList.sellerClosedList.CloseListPagination\nimport constant_Webservices.Constant\nimport kotlinx.android.synthetic.main.activity_select_cities.*\nimport kotlinx.android.synthetic.main.toolbar.*\nimport kotlinx.android.synthetic.main.toolbar.view.*\n\nclass SelectCitiesActivity : AppCompatActivity(), SelectCitiesAdapter.selectedCityInteface,\n    GetttingSelectedCityAdapter.removeSelectedCityInterface {\n    private var selectedCity = ArrayList<CitiesModel>()\n    private var allCityGlobal = ArrayList<CitiesModel>()\n    private var gettingSlectedCity = ArrayList<CitiesModel>()\n    private lateinit var toolbarr: Toolbar\n    private lateinit var selectCitiesAdapter: SelectCitiesAdapter\n    private lateinit var getSelectedCityAdapter: GetttingSelectedCityAdapter//click the city than show on the adapter\n    private lateinit var mvmodel: SelectCitiesViewModel\n    lateinit var text: TextView\n    var islastpageData: Boolean = false\n    var isLoadingMoreItems: Boolean = false\n    var page = 0\n    var layoutpag = LinearLayoutManager(this)\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_select_cities)\n     //   mvmodel = ViewModelProviders.of(this)[SelectCitiesViewModel::class.java]\n        mvmodel = ViewModelProvider(this).get(SelectCitiesViewModel::class.java)\n        window.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN)\n\n        getCityAdapter()//getting the cities\n        selectedCityAdapter()\n        //var from = intent.getStringExtra(\"keyHideButton\")\n        if (intent.hasExtra(\"keyHideButton\")) {\n            SettingUpToolbar()\n        } else {\n            SettingUpToolbar()\n            supportActionBar!!.setDisplayHomeAsUpEnabled(true)\n            supportActionBar!!.setHomeAsUpIndicator(R.drawable.ic_back_icon)\n        }\n        //set the text\n        if (intent.hasExtra(\"textSellerSide\")){\n            textheading.text=getString(R.string.city_heading_seller_side)\n        }\n        mvmodel.listSavedCities(intent)\n        mvmodel.getCities(page.toString())\n\n//**********************set cities api****************//\n        //sucessful observer\n        mvmodel.mSucessfulCitiesData().observe(this, Observer {\n            allCityGlobal = it\n            progressPagination.visibility = View.GONE\n            isLoadingMoreItems = false\n            selectCitiesAdapter.Update(categoryDatas(it))\n\n        })\n\n        //failure observer\n        mvmodel.mFailureCitiesData().observe(this, Observer {\n            progressPagination.visibility = View.GONE\n            Toast.makeText(this, it.message, Toast.LENGTH_SHORT).show()\n        })\n\n\n        //***********************pagination**********************//\n        recyclercities.addOnScrollListener(object : CloseListPagination(layoutpag) {\n            override fun loadMoreItems() {\n                isLoadingMoreItems = true\n                progressPagination.visibility = View.VISIBLE\n                page++\n                mvmodel.getCities(page.toString())\n            }\n\n            override fun isLastPage(): Boolean {\n                return islastpageData\n            }\n\n            override fun isLoading(): Boolean {\n                return isLoadingMoreItems\n\n            }\n\n        })\n\n        //**************************getting cities set to 2nd adapter*****************//\n        mvmodel.mSelectedCityGet().observe(this, Observer {\n\n            if (it.size > 0) {\n                gettingSlectedCity = it\n                txtcities.text = getString(R.string.Selected_Cities) + \" \" + it.size.toString()\n                noCitySelected.visibility = View.GONE\n            } else {\n                noCitySelected.visibility = View.VISIBLE\n                txtcities.text = getString(R.string.Selected_Cities) + \" \" + it.size.toString()\n            }\n            getSelectedCityAdapter.upDateData(it)\n\n\n        })\n\n        //**********************set the click on the search button*********************//\n        searchview.addTextChangedListener(object : TextWatcher {\n            override fun afterTextChanged(s: Editable?) {\n\n            }\n\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {\n\n            }\n\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\n                page = 0\n\n                if (s!!.isNotEmpty()) {\n                    mvmodel.searchCity(s.toString(), page.toString())\n                } else {\n                    mvmodel.getCities(page.toString())\n                }\n\n            }\n\n        })\n        //*******************************done button api save the selected city and send to server*************//\n        toolbarr.done.setOnClickListener {\n            Constant.hideSoftKeyboard(it,this)//hide keybaord\n            if (gettingSlectedCity.size == 0 || gettingSlectedCity.isEmpty()) {\n\n                Toast.makeText(this, getString(R.string.select_city), Toast.LENGTH_SHORT).show()\n            } else if (getSelectedCityAdapter.getSlectedCity().size == 0 || getSelectedCityAdapter.getSlectedCity().isEmpty()) {\n\n                Toast.makeText(this, getString(R.string.select_city), Toast.LENGTH_SHORT).show()\n            } else {\n                val cities = mvmodel.getSelectedCities()\n                if (intent.hasExtra(\"cities\")) {\n                    val intent = Intent()\n                    intent.putParcelableArrayListExtra(\"cities\", cities)\n                    setResult(Activity.RESULT_OK, intent)\n                    finish()\n                } else {\n                    mvmodel.setWebServicesCity(gettingSlectedCity)\n                }\n            }\n        }\n\n        //*******************observer of selecetd city ******************//\n        //sucessful\n        mvmodel.mSucessfulsendCity().observe(this, Observer {\n            selectedCity = it\n            var msg: String = \"\"\n            var resultcode = 0\n            for (item in it) {\n                msg = item.msg\n                val type = intent.getStringExtra(\"type\")\n                val switch = intent.getStringExtra(\"switch\")\n                val from = intent.getStringExtra(\"from\")\n\n                if (from == \"1\") {\n                    resultcode = 1233\n                } else {\n                    resultcode = 1234\n                }\n                Toast.makeText(this, msg, Toast.LENGTH_SHORT).show()\n                val intent = Intent()\n                intent.putExtra(\"type\", type)\n                intent.putExtra(\"switch\", switch)\n                intent.putExtra(\"from\", from)\n                setResult(resultcode, intent)\n                finish()\n            }\n\n        })\n        //failure\n        mvmodel.mFailureSendCity().observe(this, Observer {\n            noCitySelected.visibility = View.VISIBLE\n            Toast.makeText(this, it.message, Toast.LENGTH_SHORT).show()\n\n\n        })\n\n\n    }\n\n\n    //***********************************city already selected*****************//\n//    private fun cityData(id: String): CitiesModel {\n//        for (item in allCityGlobal) {\n//\n//            if (item.id == id) {\n//                return item\n//            }\n//        }\n//        return CitiesModel()\n//    }\n\n    //1nd adapter\n    //add cities in second Adapter\n    override fun selectedCities(mData: CitiesModel) {\n\n        mvmodel.setSelectedCity(mData)\n    }\n\n    //remove cities\n    override fun removeCities(mData: CitiesModel) {\n        mvmodel.removeCity(mData)\n\n\n    }\n\n    //remove city from 2nd adapter button\n    override fun removeSelectedCity(mData: CitiesModel) {\n        noCitySelected.visibility = View.VISIBLE\n        mvmodel.removeCity(mData)\n    }\n\n\n    private fun SettingUpToolbar() {\n        //getting toolbar id\n        toolbarr = findViewById<Toolbar>(R.id.toolbar)\n        toolbar.done.visibility = View.VISIBLE\n        title = \"\"\n        setSupportActionBar(toolbar)\n        //set the text\n        text = findViewById(R.id.toolbartittle)\n        text.text = getText(R.string.Select_Cities)\n\n\n    }\n\n    //..........back button click...........//\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\n        if (item != null) {\n            if (item.itemId == android.R.id.home) {\n                finish()\n            }\n        }\n        return super.onOptionsItemSelected(item)\n    }\n\n    override fun onBackPressed() {\n        super.onBackPressed()\n        finish()\n    }\n\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n        if (resultCode == 199 && resultCode == RESULT_OK) {\n\n        }\n    }\n    private fun selectedCityAdapter() {\n        recyclercities.layoutManager = layoutpag//set layout pag\n        selectCitiesAdapter = SelectCitiesAdapter(this)\n        recyclercities.adapter = selectCitiesAdapter\n    }\n\n    //get selcted city adapter\n    private fun getCityAdapter() {\n        val manager = LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)\n        recyclerbottom.layoutManager = manager\n        getSelectedCityAdapter = GetttingSelectedCityAdapter(this)\n        recyclerbottom.adapter = getSelectedCityAdapter\n    }\n\n\n    fun categoryDatas(it: ArrayList<CitiesModel>): ArrayList<CitiesModel> {\n        val arrayData = ArrayList<CitiesModel>()\n        for (category in it) {\n            category.hasselected = false\n            for (element in mvmodel.getSelectedCities()) {\n                if (category.id == element.id.trim()) {\n                    category.hasselected = true\n                }\n            }\n\n            arrayData.add(category)\n        }\n        return arrayData\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/caiguru/commonScreens/selectCities/SelectCitiesActivity.kt	(revision ddfacff8e54db732eb6b32ab1cad9fb3d43b92b7)
+++ app/src/main/java/com/example/caiguru/commonScreens/selectCities/SelectCitiesActivity.kt	(date 1603087799000)
@@ -142,11 +142,11 @@
         toolbarr.done.setOnClickListener {
             Constant.hideSoftKeyboard(it,this)//hide keybaord
             if (gettingSlectedCity.size == 0 || gettingSlectedCity.isEmpty()) {
-
                 Toast.makeText(this, getString(R.string.select_city), Toast.LENGTH_SHORT).show()
+
             } else if (getSelectedCityAdapter.getSlectedCity().size == 0 || getSelectedCityAdapter.getSlectedCity().isEmpty()) {
-
                 Toast.makeText(this, getString(R.string.select_city), Toast.LENGTH_SHORT).show()
+
             } else {
                 val cities = mvmodel.getSelectedCities()
                 if (intent.hasExtra("cities")) {
